<%- include('../layouts/adminheader') %>

<style>
    .tm-block {
        padding: 20px;
        border-radius: 5px;
        margin-top: 20px;
    }

    .tm-block-title {
        color: #fff;
        margin-bottom: 1px; /* Adjusted to reduce the gap */
    }

    .text-white {
        color: #fff;
    }

    .contact-info {
        text-align: right;
    }

    .contact-info p {
        margin: 0;
    }

    .customer-name {
        margin-top: 6px; /* Adjusted to reduce the gap */
        margin-left: 50px;
    }

    .label {
        display: inline-block;
        width: 60px; /* Adjusted to control the space */
    }

    .tm-product-table th,
    .tm-product-table td {
        text-align: center;
    }
/* Alternative styling for the Edit Status button */
.btn-view {
    background: linear-gradient(145deg, #f39c12, #e67e22); /* Gradient background */
    color: #fff; /* White text color */
    border: none; /* No border */
    padding: 10px 20px; /* Larger padding for a bigger button */
    border-radius: 5px; /* More rounded corners */
    cursor: pointer; /* Pointer cursor on hover */
    font-size: 16px; /* Larger font size */
    font-weight: bold; /* Bold text */
    text-transform: uppercase; /* Uppercase text */
    transition: all 0.3s ease; /* Smooth transition for all properties */
    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.2); /* Subtle shadow */
}

/* Hover effect */
.btn-view:hover {
    background: linear-gradient(145deg, #e67e22, #f39c12); /* Reverse gradient on hover */
    box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.3); /* More pronounced shadow on hover */
    transform: translateY(-3px); /* Lift button on hover */
}

/* Active state effect */
.btn-view:active {
    background: linear-gradient(145deg, #e67e22, #f39c12); /* Same gradient for active state */
    box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.2); /* Less shadow on click */
    transform: translateY(1px); /* Slightly lower button on click */
}
    .summary p {
        color: #fff;
        margin: 5px 0;
        font-size: 16px;
    }

    .summary p:nth-child(4) {
        font-weight: bold;
    }



/* end */

    /* Flexbox adjustments for equal height columns */
    .tm-content-row {
        display: flex;
        flex-wrap: wrap;
        gap: 20px; /* Adjust the gap between columns */
    }

    .tm-block-col {
        flex: 1;
        min-width: 300px; /* Ensure columns do not shrink below this width */
    }

    .tm-col-avatar,
    .tm-col-account-settings {
        display: flex;
        flex-direction: column;
    }

    .tm-col-avatar {
        display: flex;
        align-items: center; /* Center the content vertically */
        justify-content: center; /* Center the content horizontally */
    }
    
    .tm-col-account-settings {
        flex: 2; /* Make this column take up more space if needed */
    }

    .tm-block-avatar,
    .tm-block-settings {
        flex: 1; /* Make both blocks take up equal height */
        display: flex;
        flex-direction: column;
    }

    /* Ensure the avatar and account settings sections take up equal space */
    .tm-block-avatar,
    .tm-block-settings {
        height: 100%;
    }

    .tm-block-settings {
    max-height: 200px; /* Adjust this value as needed */
    overflow-y: auto; /* Add a scrollbar if content overflows */
    padding: 20px; /* Optional: Adjust padding as needed */
}
.tm-block-settings {
    height: 500px; /* Adjust this height as needed */
    overflow: hidden; /* Hide any overflow content */
    padding: 20px; /* Optional: Adjust padding as needed */
}
/* Optional: Adjust the height of the table to fit within the block */
.tm-product-table {
    margin-bottom: 1px; /* Add margin to separate from the order summary */
}

/* Reduce the gap between the table and order summary */
.tm-block-settings .summary {
    margin-top: 1px; /* Adjust this value to reduce the gap */
}
/* Ensure the column and block take up the remaining space */
.tm-col-account-settings {
    flex: 2; /* Adjust as needed to fit your layout */
}



/* Flex container for aligning content */
.tm-block-settings {
    display: flex;
    flex-direction: column;
    align-items: flex-end; /* Aligns items to the right */
}

/* Adjust the order summary to be on the right side */
.tm-bg-primary-dark.tm-block-settings {
    margin-left: auto; /* Pushes the block to the right */
    width: 100%; /* Ensure it takes up full width */
}

/* Different font style for the summary */
.summary {
    font-family: 'Arial', sans-serif; /* Change font family */
    font-size: 14px; /* Change font size */
    color: #f39c12; /* Change text color */
    text-align: right; /* Align text to the right */
}
/* Specific styling for Order Summary heading */
.tm-block-settings .tm-block-title {
    text-align: right; /* Align title to the right */
    border-bottom: 2px solid #f39c12; /* Add underline */
   
    font-family: 'Arial', sans-serif; /* Ensure font consistency */
}

.custom-shipping-address {
    padding: 20px;
}

.custom-shipping-address .tm-block-title {
    margin-bottom: 20px;
}

.custom-shipping-address .address-info {
    text-align: left;
}

.custom-shipping-address .customer-name {
    margin-top: 20px;
}

.custom-shipping-address .label {
    font-weight: bold;
}



/* General button styles */
.btn {
    display: inline-block;
    font-weight: 400;
    color: #212529;
    text-align: right;
    vertical-align: middle;
    user-select: none;
    background-color: transparent;
    border: 1px solid transparent;
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    line-height: 1.5;
    border-radius: 0.25rem;
    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

/* Specific styles for the delete button */
.btn-danger {
    color: #fff;
    background-color: #dc3545;
    border-color: #dc3545;
}

/* Hover effect */
.btn-danger:hover {
    color: #fff;
    background-color: #c82333;
    border-color: #bd2130;
}

/* Custom styles for the modal */
.modal-content {
    background-color: #fff; /* White background for the modal */
    border-radius: 8px; /* Rounded corners */
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow */
}

.modal-header {
    border-bottom: 1px solid #e5e5e5; /* Light border at the bottom of the header */
    background-color: #f8f9fa; /* Light background color for the header */
    padding: 15px 20px; /* Padding around the header content */
}

.modal-title {
    font-size: 18px; /* Larger font size for the title */
    color: #333; /* Dark color for the title */
}

.close {
    font-size: 1.5rem; /* Larger close button font size */
    color: #333; /* Dark color for the close button */
    opacity: 0.7; /* Slightly transparent close button */
}

.close:hover {
    color: #000; /* Darker color on hover */
    opacity: 1; /* Fully opaque on hover */
}

.modal-body {
    padding: 20px; /* Padding around the form in the body */
}

.form-group label {
    font-size: 16px; /* Larger font size for label */
    font-weight: bold; /* Bold label text */
    color: #333; /* Dark color for label */
}

.form-control {
    height: 50px; /* Increase height */
    font-size: 16px; /* Larger font size */
    padding: 10px; /* Add padding */
    border-radius: 5px; /* Rounded corners */
    border: 1px solid #e5e5e5; /* Light border */
    background-color: #f9f9f9; /* Light background color */
    color: #333; /* Dark text color */
    transition: all 0.3s ease; /* Smooth transition */
}

/*  */

/* Custom styles for modal footer */
.modal-footer {
    border-top: 1px solid #e5e5e5; /* Light border at the top of the footer */
    background-color: #f8f9fa; /* Light background color for the footer */
    padding: 15px 20px; /* Padding around the footer content */
    display: flex;
    justify-content: flex-end; /* Align buttons to the right */
}

.btn-secondary, .btn-primary {
    font-size: 16px; /* Larger font size for buttons */
    padding: 10px 20px; /* Padding around button text */
    border-radius: 5px; /* Rounded corners for buttons */
    border: none; /* Remove default border */
}

.btn-secondary {
    background-color: #6c757d; /* Gray background color for secondary button */
    color: #fff; /* White text color */
}

.btn-secondary:hover {
    background-color: #5a6268; /* Darker gray on hover */
}

.btn-primary {
    background-color: #007bff; /* Blue background color for primary button */
    color: #fff; /* White text color */
}

.btn-primary:hover {
    background-color: #0056b3; /* Darker blue on hover */
}

.btn-primary {
    background-color: #f39c12; /* Button background color */
    border: none; /* No border */
    color: #fff; /* Button text color */
}

.btn-primary:hover {
    background-color: #e67e22; /* Darker color on hover */
}

.btn-secondary {
    background-color: #6c757d; /* Secondary button color */
    border: none; /* No border */
    color: #fff; /* Button text color */
}

.btn-secondary:hover {
    background-color: #5a6268; /* Darker color on hover */
}

/* Add this CSS to your stylesheet or inside a <style> block */
    .text-white.customer-name {
    font-size: 16px; /* Adjust the font size as needed */
    font-weight: bold; /* Make the font bold */
    color: #ffffff; /* Ensure the text is white */
    margin: 10px 0; /* Add margin for spacing */
}

.text-white.customer-name .label {
    font-size: 14px; /* Adjust the label font size */
    font-weight: normal; /* Make the label text normal weight */
}



.tm-status-circle {
    display: inline-block;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    margin-right: 5px;
}

.tm-status-circle.moving {
    background-color: #00c851; /* Green for Moving */
}

.tm-status-circle.pending {
    background-color: #ffbb33; /* Yellow for Pending */
}

.tm-status-circle.cancelled {
    background-color: #ff4444; /* Red for Cancelled */
}


.summary {
    text-align: center;
  }
  </style>

  
<body id="ordersPage">
    <nav class="navbar navbar-expand-xl">
        <div class="container h-100">
            <a class="navbar-brand" href="index.html">
                <h1 class="tm-site-title mb-0">Order Admin</h1>
            </a>
            <ul class="breadcrumb mt-2">
                <li class="breadcrumb-item"><a href="/admin/OrderList">Admin &gt;&gt;</a><span style="color: #ced5e4;">Oreder Listpage</span></li>
            </ul>
            <button class="navbar-toggler ml-auto mr-0" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <i class="fas fa-bars tm-nav-icon"></i>
            </button>
            <div class="col-lg-3 col-md-6 ms-auto">
              
          </div>
  
        </div>
    </nav>

     <!-- Content starts here -->
<div class="container mt-5">
  <div class="row tm-content-row">
      <div class="col-12 tm-block-col">
          <div class="tm-bg-primary-dark tm-block tm-block-h-auto">
              <div class="d-flex justify-content-between align-items-center">
                <p class="text-white customer-name"><span class="label"></span> <%= order.userId.name %></p>

                  <div class="contact-info text-white">
                      <p><strong>Contact Info :</strong></p>
                      <p>Email: <%= order.userId.email %></p>
                      <p>Mobile: <%= order.userId.mobile %></p>
                  </div>
              </div>
          </div>
      </div>
  </div>

  <!-- Ordered Product Details -->
  <div class="row tm-content-row">
    <div class="tm-block-col tm-col-avatar">
      <div class="tm-bg-primary-dark tm-block tm-block-avatar tm-block-settings">
        <div class="tm-avatar-container">
          <img id="product-image" src="/path/to/default/image.jpg" alt="Default Image" class="tm-avatar img-fluid mb-4" />
        </div>
      </div>
    </div>

    <div class="tm-block-col tm-col-account-settings">
        <div class="tm-bg-primary-dark tm-block tm-block-settings">
          <h2 class="tm-block-title">Ordered Product Details</h2>
          <table class="table table-hover tm-table-small tm-product-table">
            <thead>
              <tr>
                <th>Product Name</th>
                <th>Status</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
              <% order.products.forEach((product, index) => { %>
              <% const variant = product.productId.variants.find(v => v._id.toString() === product.variantId.toString()); %>
              <% const imageUrl = variant && variant.images && variant.images.length > 0 ? `/uploads/${variant.images[0]}` : '/path/to/default/image.jpg'; %>
              <tr class="product-row" data-image-url="<%= imageUrl %>">
                <td><%= truncateDescription(product.productId.productname, 30) %></td>
                <td><%= product.returnStatus === 'Requested' ? 'Return Requested' : product.status %></td>
                <td>₹<%= product.price %></td>
                <td><%= product.quantity %></td>
                <td>₹<%= product.price * product.quantity %></td>
                <% if (product.returnStatus !== 'Rejected') { %>
                <td><button class="btn btn-view edit-status-btn" data-toggle="modal" data-target="#editStatusModal<%= index %>">Edit Status</button></td>
                <% } else { %>
                <td>Return Rejected</td>
                <% } %>
              </tr>
              <% }) %>
            </tbody>
          </table>
        </div>
      </div>
      
   <!-- Edit Status Modal for each product -->
<% order.products.forEach((product, index) => { %>
    <div class="modal fade" id="editStatusModal<%= index %>" tabindex="-1" role="dialog" aria-labelledby="editStatusModalLabel<%= index %>" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editStatusModalLabel<%= index %>">Edit Status</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <% if (product.status === 'Canceled') { %>
                        <p>Status: Canceled</p>
                        <!-- Display a message or status indication -->
                    <% } else { %>
                        <form class="editStatusForm" data-index="<%= index %>">
                            <div class="form-group">
                                <select class="form-control statusSelect" name="status">
                                    <% if (product.returnStatus === "Requested") { %>
                                        <option value="Return Confirmed">Accept Return Request</option>
                                        <option value="Rejected">Reject Return Request</option>
                                    <% } else { %>
                                        <option value="Pending">Pending</option>
                                        <option value="Dispatched">Dispatched</option>
                                        <option value="Out For Delivery">Out For Delivery</option>
                                        <option value="Delivered">Delivered</option>
                                    <% } %>
                                </select>
                            </div>
                            <input type="hidden" class="productId" value="<%= product._id %>">
                            <input type="hidden" class="orderId" value="<%= order._id %>">
                        </form>
                    <% } %>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <% if (product.status !== 'Canceled') { %>
                        <button type="button" class="btn btn-primary saveStatusBtn" data-index="<%= index %>">Save changes</button>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
<% }) %>
<!-- Shipping Address and Order Summary -->
<div class="row tm-content-row">
    <div class="col-lg-6 tm-block-col">
      <div class="tm-bg-primary-dark tm-block tm-block-h-auto custom-shipping-address">
        <div class="d-flex flex-column align-items-start">
          <h2 class="tm-block-title">Shipping Address</h2>
          <div class="address-info text-white">
            <p><strong>Name:</strong> <%= order.address.name %></p>
            <p><strong>Address:</strong> <%= order.address.address %></p>
            <p><strong>Street:</strong> <%= order.address.street %></p>
            <p><strong>City:</strong> <%= order.address.city %></p>
            <p><strong>State:</strong> <%= order.address.state %></p>
            <p><strong>Postal Code:</strong> <%= order.address.pincode %></p>
          </div>
        </div>
      </div>
    </div>
  
    <div class="col-lg-6 tm-block-col">
      <div class="tm-bg-primary-dark tm-block tm-block-settings">
        <h2 class="tm-block-title new_block">Order Summary</h2>
        <div class="summary text-center">
          <p>Subtotal: ₹<%= order.products.reduce((sum, product) => sum + (product.price * product.quantity), 0).toFixed(2) %></p>
          <p>Discount: ₹<%= order.discount %></p>
          <p>Shipping: ₹<%= order.shippingCharge.toFixed(2) %></p>
          <p>Total: ₹<%= order.totalAmount.toFixed(2) %></p>
        </div>
      </div>
    </div>
  </div>
  

<footer class="tm-footer row tm-mt-small">
    <div class="col-12 font-weight-light">
      <p class="text-center text-white mb-0 px-4 small">
        Copyright &copy; <b>2018</b> All rights reserved.
        Design: <a rel="nofollow noopener" href="https://templatemo.com" class="tm-footer-link">Template Mo</a>
      </p>
    </div>
</footer>

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.2/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
      const productImage = document.getElementById('product-image');
      const productRows = document.querySelectorAll('.product-row');

      productRows.forEach(row => {
          row.addEventListener('click', function() {
              const imageUrl = this.dataset.imageUrl;
              productImage.src = imageUrl;
          });
      });

      // Set the first product's image as default
      if (productRows.length > 0) {
          const firstProductImageUrl = productRows[0].dataset.imageUrl;
          productImage.src = firstProductImageUrl;
      }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const saveStatusButtons = document.querySelectorAll('.saveStatusBtn');

    saveStatusButtons.forEach(button => {
      button.addEventListener('click', async () => {
        const index = button.getAttribute('data-index');
        const form = document.querySelector(`.editStatusForm[data-index="${index}"]`);
        
        if (form) {
          const productIdElement = form.querySelector('.productId');
          const orderIdElement = form.querySelector('.orderId');
          const statusSelectElement = form.querySelector('.statusSelect');

          if (productIdElement && orderIdElement && statusSelectElement) {
            const productId = productIdElement.value.trim();
            const orderId = orderIdElement.value.trim();
            const status = statusSelectElement.value.trim();

            console.log("productId :",productId);
            console.log("orderId :", orderId);
            console.log("status :", status);
            
            
            

            const formData = {
              productId: productId,
              orderId: orderId,
              status: status
            };

            try {
              const response = await fetch('/admin/update-status', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData),
              });

              const result = await response.json();

              if (response.ok) {
                Swal.fire({
                  title: 'Success',
                  text: result.message,
                  icon: 'success',
                  confirmButtonText: 'OK'
                }).then(() => {
                  $(`#editStatusModal${index}`).modal('hide');
                  location.reload();
                });
              } else {
                Swal.fire({
                  title: 'Error',
                  text: result.message,
                  icon: 'error',
                  confirmButtonText: 'OK'
                });
              }
            } catch (error) {
              Swal.fire({
                title: 'Error',
                text: 'An error occurred. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK'
              });
            }
          }
        }
      });
    });
  });
</script>