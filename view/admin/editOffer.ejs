<%- include('../layouts/adminheader') %>
</head>
<style>
  .form-group textarea.form-control {
    /* background-color: #444; */
    border: none;
    color: #fff;
    /* Adjust height and font size as needed */
    height: 150px;
    /* Example height */
    font-size: 14px;
    /* Example font size */
  }

  .btn-block {
    width: 100%;
  }

  .tm-footer {
    padding: 1rem;
  }

  .tm-footer a {
    color: #007bff;
  }

  /* user profile */
  .error {
    color: red;
    font-size: 0.875em;
    margin-top: 5px;
  }

  .success input {
    border-color: green;
  }

  .error input {
    border-color: red;
  }

  .dropdown-menu {
    display: none;
    position: absolute;
    background: #fff;
    border: 1px solid #ddd;
    z-index: 1000;
  }

  .dropdown-menu.show {
    display: block;
  }



  /* Ensures the select element takes full width */
.form-group select.form-control {
  width: 100%;
  box-sizing: border-box; /* Ensures padding and borders are included in the width */
}

/* Optional: Increase font size for better readability */
.form-group select.form-control {
  font-size: 16px; /* Adjust as needed */
}

/* Optional: Adjust the height of the select dropdown */
.form-group select.form-control {
  height: auto; /* Ensure height adjusts to content */
  padding: 10px; /* Adjust padding for better appearance */
}

/* Optional: Handle overflow to ensure text is not cut off */
.form-group select.form-control {
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}


#selection-container select {
  height: 150px; /* Set a fixed height */
  overflow-y: scroll; /* Enable vertical scrolling */
}


/* Additional styling for checkboxes */
.form-check {
  margin-bottom: 0.5rem;
}

.form-check-input {
  margin-right: 0.5rem;
}
</style>
</head>

<body>
<nav class="navbar navbar-expand-xl">
  <div class="container h-100">
    <a class="navbar-brand" href="index.html">
      <h1 class="tm-site-title mb-0">MANAGE OFFER</h1>
    </a>
    <ul class="breadcrumb mt-2">
      <li class="breadcrumb-item"><a href="/admin/Products">Admin &gt;&gt;</a>Dashboard</li>
    </ul>
    <button class="navbar-toggler ml-auto mr-0" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
      aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <i class="fas fa-bars tm-nav-icon"></i>
    </button>
    <div class="col-lg-3 col-md-6 ms-auto">
      <form action="">
        <!-- <input type="text" placeholder="Search..." class="form-control" id="searchInput" name="search" /> -->
      </form>
    </div>
  </div>
</nav>
<div class="container tm-mt-big tm-mb-big">
    <div class="row">
      <div class="col-xl-9 col-lg-10 col-md-12 col-sm-12 mx-auto">
        <div class="tm-bg-primary-dark tm-block tm-block-h-auto">
          <div class="row">
            <div class="col-12">
              <h2 class="tm-block-title d-inline-block">Add Offer</h2>
            </div>
          </div>
          <div class="row tm-edit-product-row">
            <div class="col-xl-12 col-lg-12 col-md-12">
                <form action="/admin/editOffer/<%= offer._id %>" class="tm-edit-product-form" id="form" method="PUT">
                    <input type="hidden" name="_id" value="<%= offer._id %>">
                    <div class="form-group mb-3">
                        <label for="name">Offer Name</label>
                        <input id="name" name="name" type="text" class="form-control validate" value="<%= offer.name %>" required />
                        <div class="error"></div>
                      </div>
                      <div class="form-group mb-3">
                        <label for="activation-date">Activation Date</label>
                        <input id="activation-date" name="activation-date" type="date" class="form-control validate" value="<%= offer.activeDate.toISOString().split('T')[0] %>" required />
                        <div class="error"></div>
                      </div>
                      <div class="form-group mb-3">
                        <label for="expire-date">Expire Date</label>
                        <input id="expire-date" name="expire-date" type="date" class="form-control validate" value="<%= offer.expireDate.toISOString().split('T')[0] %>" required />
                        <div class="error"></div>
                      </div>
                      <div class="form-group mb-3">
                        <label for="discount-amount">Discount Amount (%)</label>
                        <input id="discount-amount" name="discount-amount" type="number" step="0.01" class="form-control validate" value="<%= offer.discount %>" required />
                        <div class="error"></div>
                      </div>
                <div class="form-group mb-3">
                    <label for="offer-type">Offer Type</label>
                    <select id="offer-type" name="offer-type" class="form-control validate" required>
                        <option value="">Select Type</option>
                        <option value="product">Products</option>
                        <option value="category">Category</option>
                    </select>
                    <div class="error"></div>
                  </div>
                  <div class="form-group mb-3" id="selection-container">
                    <!-- Options will be loaded here based on offer type selection -->
                  </div>
                  <div class="row">
                    <div class="col-6">
                      <button type="submit" class="btn btn-primary btn-block text-uppercase">Submit</button>
                    </div>
                    <div class="col-6">
                      <button type="button" class="btn btn-primary btn-block text-uppercase" onclick="window.history.back();">Back</button>
                    </div>
                  </div>
               </form>
             </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      const existingOffer = <%- offerData %>;
  </script>
  
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
<script src="js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
      const offerTypeSelect = document.getElementById('offer-type');
      const selectionContainer = document.getElementById('selection-container');
  
      // existingOffer is now available from the previous script tag
  
      if (existingOffer) {
          offerTypeSelect.value = existingOffer.offerType;
          loadOptionsForOfferType(existingOffer.offerType, existingOffer.applicableIds);
      }
  
      offerTypeSelect.addEventListener('change', function() {
          loadOptionsForOfferType(this.value);
      });
  
      async function loadOptionsForOfferType(offerType, preSelectedIds = []) {
          selectionContainer.innerHTML = ''; // Clear previous options
  
          if (offerType === 'product' || offerType === 'category') {
              const endpoint = offerType === 'product' ? '/admin/getProducts' : '/admin/getCategories';
              try {
                  const response = await fetch(endpoint);
                  if (!response.ok) {
                      throw new Error(`HTTP error! status: ${response.status}`);
                  }
                  const items = await response.json();
  
                  // Create a "Select All" checkbox
                  const selectAllCheckbox = document.createElement('input');
                  selectAllCheckbox.type = 'checkbox';
                  selectAllCheckbox.id = `select-all-${offerType}s`;
                  selectAllCheckbox.className = 'form-check-input';
                  const selectAllLabel = document.createElement('label');
                  selectAllLabel.htmlFor = `select-all-${offerType}s`;
                  selectAllLabel.textContent = `Select All ${offerType.charAt(0).toUpperCase() + offerType.slice(1)}s`;
                  selectAllLabel.className = 'form-check-label';
                  
                  selectionContainer.appendChild(selectAllCheckbox);
                  selectionContainer.appendChild(selectAllLabel);
                  selectionContainer.appendChild(document.createElement('br'));
  
                  // Create a container for checkboxes
                  const checkboxContainer = document.createElement('div');
                  checkboxContainer.id = `${offerType}-checkbox-container`;
                  
                  items.forEach(item => {
                      const checkboxWrapper = document.createElement('div');
                      checkboxWrapper.className = 'form-check';
                      
                      const checkbox = document.createElement('input');
                      checkbox.type = 'checkbox';
                      checkbox.className = 'form-check-input';
                      checkbox.name = `applicableTo${offerType.charAt(0).toUpperCase() + offerType.slice(1)}s[]`;
                      checkbox.value = item._id;
                      checkbox.id = `${offerType}-${item._id}`;
                      
                      // Check if this item was previously selected
                      if (preSelectedIds.includes(item._id)) {
                          checkbox.checked = true;
                      }
  
                      const label = document.createElement('label');
                      label.htmlFor = `${offerType}-${item._id}`;
                      label.textContent = offerType === 'product' ? item.productname : item.name;
                      label.className = 'form-check-label';
                      
                      checkboxWrapper.appendChild(checkbox);
                      checkboxWrapper.appendChild(label);
                      checkboxContainer.appendChild(checkboxWrapper);
                  });
                  
                  selectionContainer.appendChild(checkboxContainer);
  
                  // Handle "Select All" checkbox
                  selectAllCheckbox.addEventListener('change', function() {
                      const isChecked = this.checked;
                      document.querySelectorAll(`#${offerType}-checkbox-container input[type="checkbox"]`).forEach(checkbox => {
                          checkbox.checked = isChecked;
                      });
                  });
              } catch (error) {
                  console.error('Error fetching data:', error);
                  selectionContainer.innerHTML = `<p>Error loading ${offerType}s. Please try again.</p>`;
              }
          }
      }
  });
  </script>
<script>
  $(document).ready(function() {
    const form = document.getElementById('form');
    const name = document.getElementById('name');
    const activationDate = document.getElementById('activation-date');
    const expireDate = document.getElementById('expire-date');
    const discountAmount = document.getElementById('discount-amount');
    const offerTypeBtn = document.getElementById('offer-type-btn');
    const offerTypeMenu = document.getElementById('offer-type-menu');
    const offerTypeInput = document.getElementById('offer-type');

    form.addEventListener('submit', async e => {
  e.preventDefault();

  validateInputs();

  if (isValid()) {
    // Collect selected products or categories based on offer type
    const offerType = offerTypeInput.value;
    const selectedItems = offerType === 'product'
      ? Array.from(document.querySelectorAll('#product-checkbox-container input:checked')).map(checkbox => checkbox.value)
      : Array.from(document.querySelectorAll('#category-checkbox-container input:checked')).map(checkbox => checkbox.value);

    const formData = {
      _id: form.querySelector('input[name="_id"]').value,
      name: name.value.trim(),
      activationDate: activationDate.value,
      expireDate: expireDate.value,
      discountAmount: discountAmount.value,
      offerType: offerTypeInput.value,
      applicableTo: selectedItems  // Add selected items here
    };

    try {
      const response = await fetch(`/admin/editOffer/${formData._id}`, {
        method: 'PUT', // Use PUT for updates
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      const result = await response.json();

      if (response.ok) {
        Swal.fire({
          title: 'Success',
          text: result.message,
          icon: 'success',
          confirmButtonText: 'OK'
        }).then(() => {
          window.location.href = '/admin/offerManage'; // Adjust the redirect URL as needed
        });
      } else {
        Swal.fire({
          title: 'Error',
          text: result.message,
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    } catch (error) {
      console.error('Error during fetch:', error);
      Swal.fire({
        title: 'Error',
        text: 'An error occurred. Please try again.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    }
  }
});
    const isValid = () => {
      return name.parentElement.classList.contains('success') &&
        activationDate.parentElement.classList.contains('success') &&
        expireDate.parentElement.classList.contains('success') &&
        discountAmount.parentElement.classList.contains('success') &&
        offerTypeInput.value !== '';
    };

    const setError = (element, message) => {
      const inputControl = element.parentElement;
      const errorDisplay = inputControl.querySelector('.error');

      errorDisplay.innerText = message;
      inputControl.classList.add('error');
      inputControl.classList.remove('success');
    };

    const setSuccess = element => {
      const inputControl = element.parentElement;
      const errorDisplay = inputControl.querySelector('.error');

      errorDisplay.innerText = '';
      inputControl.classList.add('success');
      inputControl.classList.remove('error');
    };

    const validateInputs = () => {
      const nameValue = name.value.trim();
      const activationDateValue = activationDate.value.trim();
      const expireDateValue = expireDate.value.trim();
      const discountAmountValue = discountAmount.value.trim();

      if (nameValue === '') {
        setError(name, 'Offer name is required');
      } else {
        setSuccess(name);
      }

      if (activationDateValue === '') {
        setError(activationDate, 'Activation date is required');
      } else {
        setSuccess(activationDate);
      }

      if (expireDateValue === '') {
        setError(expireDate, 'Expire date is required');
      } else {
        setSuccess(expireDate);
      }

      if (discountAmountValue === '' || isNaN(discountAmountValue)) {
        setError(discountAmount, 'Discount amount is required and must be a number');
      } else {
        setSuccess(discountAmount);
      }
    };

    $('.dropdown-item').click(function() {
      const value = $(this).data('value');
      offerTypeBtn.textContent = $(this).text();
      offerTypeInput.value = value;
      $('#offer-type-menu').removeClass('show');
    });

    $(document).click(function(event) {
      if (!$(event.target).closest('.dropdown').length) {
        $('#offer-type-menu').removeClass('show');
      }
    });

    offerTypeBtn.addEventListener('click', () => {
      $('#offer-type-menu').toggleClass('show');
    });
  });
</script>

<%- include('../layouts/footer') %>