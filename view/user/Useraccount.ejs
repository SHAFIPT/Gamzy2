<%- include('../layouts/userheader') %>

<!-- Font Awesome CDN -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">


</head>

<style>
 /* Navbar Styles */
.navbar {
    background-color: #343a40; /* Dark background */
    padding: 1rem 1rem; /* Padding */
}

.navbar-brand h1 {
    color: #ffffff; /* White text for the brand name */
    font-size: 2rem; /* Adjust as needed */
}

.navbar-nav .nav-item .nav-link {
    color: #ffffff; /* White text for nav links */
    margin-right: 1rem; /* Spacing between links */
}

.navbar-nav .nav-item .nav-link:hover {
    color: #ffc107; /* Yellow text on hover */
}

.navbar-nav .nav-item.active .nav-link {
    color: #ffc107; /* Yellow text for the active link */
}

.navbar-toggler {
    border-color: rgba(255, 255, 255, 0.1); /* Light border for toggler */
}

.navbar-toggler .navbar-toggler-icon {
    background-image: url("data:image/svg+xml;...");
}

/* Breadcrumb Section Styles */
.breadcrumb-option {
    background: #f8f9fa; /* Light background */
    padding: 3.5rem 0; /* Padding */
    margin-bottom: 140px; /* Adjust the margin as needed */
}

.breadcrumb__text h4 {
    text-align: center; /* Center the text */
    margin: 0; /* Remove margin */
    font-size: 40px; /* Adjust as needed */
    color: #333333; /* Dark text color */
}

.breadcrumb__links {
    text-align: center; /* Center the breadcrumb links */
    font-size: 1rem; /* Adjust as needed */
    color: #777777; /* Light grey color */
}

/* Ensure breadcrumb links have some margin and are styled correctly */
.breadcrumb__links a {
    color: #007bff; /* Primary color for links */
    text-decoration: none; /* Remove underline */
}

.breadcrumb__links a:hover {
    text-decoration: underline; /* Underline on hover */
}

.breadcrumb__links span {
    color: #333; /* Dark color for current page */
}
.bg-black {
    background-color: #000000;
}

.topper {
    color: #ffffff;
}

.topper .icon {
    font-size: 18px;
    color: #ffffff;
}

.topper .text {
    color: #ffffff;
}

.hero-wrap {
    padding: 60px 0;
    color: #ffffff;
    text-align: center;
}

.bread {
    font-size: 36px;
    margin-bottom: 0;
}
.left-sidebar {
  background: #f8f9fa;
  padding: 20px;
  border-radius: 5px;
  margin-bottom: 30px;
}

.sidebar-options {
  list-style: none;
  padding: 0;
  margin: 0;
}

.sidebar-options li {
  margin-bottom: 15px;
}

.sidebar-options li a {
  text-decoration: none;
  color: #333;
  font-size: 16px;
  display: block;
  padding: 10px 15px;
  border-radius: 5px;
  transition: background 0.3s, color 0.3s;
}

.sidebar-options li.active a,
.sidebar-options li a:hover {
  background: #007bff;
  color: #fff;
}




.ftco-animate {
    animation: fadeInUp 0.5s both;
}

.addresses-list {
    margin-top: 20px;
}

.address-item {
    border: 1px solid #ccc;
    padding: 20px;
    margin-bottom: 15px;
    border-radius: 8px;
    position: relative;
    padding-left: 50px;
    background: #f9f9f9;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: background 0.3s, box-shadow 0.3s;
}

.address-item:hover {
    background: #fff;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
}

.address-item input[type="radio"] {
    position: absolute;
    top: 20px;
    left: 20px;
}

.address-item label {
    display: block;
    cursor: pointer;
}

.address-item h5 {
    margin: 0 0 8px;
    font-size: 20px;
    font-weight: 600;
    color: #333;
}

.address-item p {
    margin: 0 0 5px;
    font-size: 17px;
    color: #666;
}
.button-group {
    margin-top: 1rem;
}

.btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    transition: background 0.3s;
}

.edit-btn {
    background: #ffc107;
    color: #fff;
}

.edit-btn:hover {
    background: #e0a800;
}

.delete-btn {
    background: #dc3545;
    color: #fff;
    margin-left: 0.5rem;
}

.delete-btn:hover {
    background: #c82333;
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}



/* General button styles */
.btn {
    font-size: 16px;
    font-weight: bold;
    padding: 10px 20px;
    border-radius: 5px;
    transition: background-color 0.3s, border-color 0.3s;
}

.btn-primary {
    background-color: #007bff;
    border-color: #007bff;
    color: white;
}

.btn-primary:hover {
    background-color: #0056b3;
    border-color: #004085;
}

.btn-secondary {
    background-color: #6c757d;
    border-color: #6c757d;
    color: white;
    margin-left: 10px;
}

.btn-secondary:hover {
    background-color: #5a6268;
    border-color: #4e555b;
}

/* Style the button group container */
.button-group {
    display: flex;
    gap: 10px; /* Space between buttons */
}

/* Style the modals */
.modal-content {
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.modal-header {
    background-color: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
}

.modal-footer {
    border-top: 1px solid #dee2e6;
}

.modal-title {
    font-size: 18px;
    font-weight: bold;
}

.close {
    font-size: 24px;
    line-height: 1;
    color: #000;
}

.input-group-text {
    cursor: pointer;
}

.input-group-text i {
    font-size: 1.2rem;
}

.input-group input[type="password"] {
    padding-right: 2.5rem; /* Adjust this value as needed to accommodate the eye icon */
}

.modal-body form .form-group {
    margin-bottom: 1rem;
}



/* user profile */
.error {
  color: red;
  font-size: 0.875em;
  margin-top: 5px;
}

.success input {
  border-color: green;
}

.error input {
  border-color: red;
}



</style>
  <!-- Navbar section -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
        <a class="navbar-brand" href="#"><h1 class="logoname">GAMZY</h1></a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="oi oi-menu"></span> Menu
        </button>

        <div class="collapse navbar-collapse" id="ftco-nav">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item"><a href="/" class="nav-link">Home</a></li>
                <li class="nav-item dropdown active">
                    <a class="nav-link" href="#" aria-haspopup="true" aria-expanded="false">Shop</a>
                    <!-- Add dropdown content if needed -->
                </li>
                <li class="nav-item"><a href="about.html" class="nav-link">About</a></li>
                <li class="nav-item"><a href="blog.html" class="nav-link">Blog</a></li>
                <li class="nav-item"><a href="contact.html" class="nav-link">Contact</a></li>
                <li class="nav-item cta cta-colored"><a href="/user/productCart" class="nav-link"><span class="fas fa-shopping-cart"></span></a></li>
            </ul>
        </div>
    </div>
</nav>
<!-- End Navbar section -->

 <!-- Breadcrumb Section Begin -->
 <section class="breadcrumb-option">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="breadcrumb__text">
                    <h4>My Profile</h4>
                    <!-- <div class="breadcrumb__links">
                        <a href="./index.html">Home</a>
                        <a href="./shop.html">Shop</a>
                        <span>Check Out</span>
                    </div> -->
                </div>
            </div>
        </div>
    </div>
</section>
<!-- 
<div class="hero-wrap hero-bread" style="background-image: url('images/bg_6.jpg');">
    <div class="container">
        <div class="row no-gutters slider-text align-items-center justify-content-center">
            <div class="col-md-9 ftco-animate text-center">
                <p class="breadcrumbs"><span class="mr-2"><a href="index.html">Home</a></span> <span>My Account</span></p>
                <h1 class="mb-0 bread">Checkout</h1>
            </div>
        </div>
    </div>
</div> -->
<section class="ftco-section">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-3">
                <div class="left-sidebar">
                    <ul class="sidebar-options">
                        <li class="active"><a href="/user/myaccount">My Profile</a></li>
                        <li><a href="/user/Userorders">Orders</a></li>
                        <li><a href="/user/address">Address</a></li>
                        <li><a href="/user/signout">Signout</a></li>
                    </ul>
                </div>
            </div>
            <div class="col-md-9 ftco-animate">
                <div class="addresses-list">
                    <div class="address-item">
                        <h5><%= users.name %></h5>
                        <p>Email: <%= users.email %></p>
                        <p>Phone: <%= users.phonenumber %></p>
                        <div class="button-group mt-3">
                            <button class="btn btn-primary edit-btn" data-toggle="modal" data-target="#editProfileModal">Edit Profile</button>
                            <button class="btn btn-secondary change-password-btn" data-toggle="modal" data-target="#changePasswordModal">Change Password</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
  </section>
 <!-- Edit Profile Modal -->
<div class="modal fade" id="editProfileModal" tabindex="-1" role="dialog" aria-labelledby="editProfileModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editProfileModalLabel">Edit Profile</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editProfileForm">
                    <div class="form-group">
                        <label for="editName">Name</label>
                        <input type="text" class="form-control" id="editName" placeholder="Enter your name" value="<%= users.name %>">
                        <div class="error"></div>
                    </div>
                    <div class="form-group">
                        <label for="editPhoneNumber">Phone Number</label>
                        <input type="text" class="form-control" id="editPhoneNumber" placeholder="Enter your phone number" value="<%= users.phonenumber %>">
                        <div class="error"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveChangesBtn">Save Changes</button>
            </div>
        </div>
    </div>
</div>
<!-- Change Password Modal -->
<div class="modal fade" id="changePasswordModal" tabindex="-1" role="dialog" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="changePasswordModalLabel">Change Password</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="changePasswordForm">
                    <div class="form-group">
                        <label for="oldPassword">Old Password</label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="oldPassword" placeholder="Enter old password" required>
                            <div class="input-group-append">
                                <span class="input-group-text" id="toggleOldPassword">
                                    <i class="fas fa-eye"></i>
                                </span>
                            </div>
                        </div>
                        <small id="oldPasswordError" class="form-text text-danger"></small>
                    </div>
                    <div class="form-group">
                        <label for="newPassword">New Password</label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="newPassword" placeholder="Enter new password" required>
                            <div class="input-group-append">
                                <span class="input-group-text" id="toggleNewPassword">
                                    <i class="fas fa-eye"></i>
                                </span>
                            </div>
                        </div>
                        <small id="newPasswordError" class="form-text text-danger"></small>
                    </div>
                    <div class="form-group">
                        <label for="confirmPassword">Confirm Password</label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="confirmPassword" placeholder="Confirm new password" required>
                            <div class="input-group-append">
                                <span class="input-group-text" id="toggleConfirmPassword">
                                    <i class="fas fa-eye"></i>
                                </span>
                            </div>
                        </div>
                        <small id="confirmPasswordError" class="form-text text-danger"></small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="savePasswordChangesBtn">Save Changes</button>
            </div>
        </div>
    </div>
</div>





<script src="/js/jquery.min.js"></script>
<script src="/js/jquery-migrate-3.0.1.min.js"></script>
<script src="/js/popper.min.js"></script>
<script src="/js/bootstrap.min.js"></script>
<script src="/js/jquery.easing.1.3.js"></script>
<script src="/js/jquery.waypoints.min.js"></script>
<script src="/js/jquery.stellar.min.js"></script>
<script src="/js/owl.carousel.min.js"></script>
<script src="/js/jquery.magnific-popup.min.js"></script>
<script src="/js/aos.js"></script>
<script src="/js/jquery.animateNumber.min.js"></script>
<script src="/js/bootstrap-datepicker.js"></script>
<script src="/js/scrollax.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBVWaKrjvy3MaE7SQ74_uJiULgl1JY0H2s&sensor=false"></script>
<script src="/js/google-map.js"></script>
<script src="/js/main.js"></script>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
document.getElementById('savePasswordChangesBtn').addEventListener('click', function(event) {
    event.preventDefault();

    // Get form values
    const oldPassword = document.getElementById('oldPassword').value;
    const newPassword = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;

    // Get error message containers
    const oldPasswordError = document.getElementById('oldPasswordError');
    const newPasswordError = document.getElementById('newPasswordError');
    const confirmPasswordError = document.getElementById('confirmPasswordError');

    // Clear previous errors
    oldPasswordError.textContent = '';
    newPasswordError.textContent = '';
    confirmPasswordError.textContent = '';

    // Validation
    let isValid = true;

    if (!oldPassword) {
        oldPasswordError.textContent = 'Old password is required.';
        isValid = false;
    }

    if (!newPassword) {
        newPasswordError.textContent = 'New password is required.';
        isValid = false;
    } else if (newPassword.length < 6) {
        newPasswordError.textContent = 'New password must be at least 6 characters long.';
        isValid = false;
    }

    if (newPassword !== confirmPassword) {
        confirmPasswordError.textContent = 'Passwords do not match.';
        isValid = false;
    }

    if (isValid) {
        // Submit form or send AJAX request here
        Swal.fire({
            icon: 'success',
            title: 'Password changed successfully!',
            text: 'Your password has been updated.',
        }).then(() => {
            // You can also manually close the modal here if needed
            $('#changePasswordModal').modal('hide');
        });
    }
});
</script>

<script>
document.querySelectorAll('.input-group-text').forEach((element) => {
    element.addEventListener('click', function() {
        const input = this.previousElementSibling;
        const icon = this.querySelector('i');
        if (input.type === 'password') {
            input.type = 'text';
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
        } else {
            input.type = 'password';
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
        }
    });
});
</script>

<script>
    $(document).ready(function(){

    var quantitiy=0;
       $('.quantity-right-plus').click(function(e){
            
            // Stop acting like a button
            e.preventDefault();
            // Get the field name
            var quantity = parseInt($('#quantity').val());
            
            // If is not undefined
                
                $('#quantity').val(quantity + 1);

              
                // Increment
            
        });

         $('.quantity-left-minus').click(function(e){
            // Stop acting like a button
            e.preventDefault();
            // Get the field name
            var quantity = parseInt($('#quantity').val());
            
            // If is not undefined
          
                // Increment
                if(quantity>0){
                $('#quantity').val(quantity - 1);
                }
        });
        
    });
    document.addEventListener("DOMContentLoaded", function() {
    var currentLocation = window.location.href;
    var menuItem = document.querySelectorAll(".sidebar-options li a");

    // Loop through all sidebar items
    menuItem.forEach(function(item) {
        // Check if the href attribute of the link matches the current URL
        if (item.href === currentLocation) {
            // Add 'active' class to the parent <li> element
            item.parentElement.classList.add("active");
        } else {
            // Remove 'active' class if it's not the current URL
            item.parentElement.classList.remove("active");
        }
    });
});
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Function for updating profile
        document.getElementById('saveChangesBtn').addEventListener('click', async () => {
            validateProfileEditInputs();
            if (isProfileEditValid()) {
                const name = document.getElementById('editName').value;
                const phoneNumber = document.getElementById('editPhoneNumber').value;
        
                const data = { name, phoneNumber };
        
                try {
                    const response = await fetch('/user/updateProfile', {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });
                    const result = await response.json();
        
                    if (response.ok) {
                        Swal.fire({
                            title: 'Success',
                            text: result.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            location.reload();  // Optionally reload the page to see the changes
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: result.message,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                } catch (error) {
                    console.error('Error updating profile:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'Error updating profile.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            }
        });
    
        // Function for toggling password visibility
        function togglePasswordVisibility(inputId, iconId) {
            const input = document.getElementById(inputId);
            const icon = document.getElementById(iconId).querySelector('i');
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }
    
        document.getElementById('toggleOldPassword').addEventListener('click', () => {
            togglePasswordVisibility('oldPassword', 'toggleOldPassword');
        });
    
        document.getElementById('toggleNewPassword').addEventListener('click', () => {
            togglePasswordVisibility('newPassword', 'toggleNewPassword');
        });
    
        document.getElementById('toggleConfirmPassword').addEventListener('click', () => {
            togglePasswordVisibility('confirmPassword', 'toggleConfirmPassword');
        });
    
        // Function for changing password
        document.getElementById('savePasswordChangesBtn').addEventListener('click', async () => {
            validatePasswordChangeInputs();
                const oldPassword = document.getElementById('oldPassword').value;
                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;

                console.log("this is my oldPassword ",oldPassword );
                console.log("this is my newPassword ",newPassword );
                console.log("this is my confirmPassword ",confirmPassword );
                
        
                const data = { oldPassword, newPassword };
        
                try {
                    const response = await fetch('/user/changePassword', {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });
                    const result = await response.json();
                    if (response.ok) {
                        Swal.fire({
                            title: 'Success',
                            text: result.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            $('#changePasswordModal').modal('hide'); // Hide modal after successful change
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: result.message,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                } catch (error) {
                    console.error('Error changing password:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'Error changing password.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            
        });
    
        // Validation functions for profile edit
        const validateProfileEditInputs = () => {
            const nameValue = document.getElementById('editName').value.trim();
            const phoneNumberValue = document.getElementById('editPhoneNumber').value.trim();
            
            if (nameValue === '') {
                setError(document.getElementById('editName'), 'Name is required');
            } else {
                setSuccess(document.getElementById('editName'));
            }
            
            if (phoneNumberValue === '') {
                setError(document.getElementById('editPhoneNumber'), 'Phone number is required');
            } else {
                setSuccess(document.getElementById('editPhoneNumber'));
            }
        };
    
        const isProfileEditValid = () => {
            return document.getElementById('editName').parentElement.classList.contains('success') &&
                   document.getElementById('editPhoneNumber').parentElement.classList.contains('success');
        };
    
        // // Validation functions for password change
        // const validatePasswordChangeInputs = () => {
        //     const oldPasswordValue = document.getElementById('oldPassword').value.trim();
        //     const newPasswordValue = document.getElementById('newPassword').value.trim();
        //     const confirmPasswordValue = document.getElementById('confirmPassword').value.trim();

        //     console.log('Validating password inputs...');
    
    
        //     if (oldPasswordValue === '') {
        //         setError(document.getElementById('oldPassword'), 'Old password is required');
        //     } else {
        //         setSuccess(document.getElementById('oldPassword'));
        //     }
    
        //     if (newPasswordValue === '') {
        //         setError(document.getElementById('newPassword'), 'New password is required');
        //     } else {
        //         setSuccess(document.getElementById('newPassword'));
        //     }
    
        //     if (confirmPasswordValue === '') {
        //         setError(document.getElementById('confirmPassword'), 'Confirm password is required');
        //     } else if (newPasswordValue !== confirmPasswordValue) {
        //         setError(document.getElementById('confirmPassword'), 'Passwords do not match');
        //     } else {
        //         setSuccess(document.getElementById('confirmPassword'));
        //     }
        // };
    
    //     const isPasswordChangeValid = () => {
    //         return document.getElementById('oldPassword').parentElement.classList.contains('success') &&
    //                document.getElementById('newPassword').parentElement.classList.contains('success') &&
    //                document.getElementById('confirmPassword').parentElement.classList.contains('success');
    //     };
    //     const setError = (element, message) => {
    //     const inputControl = element.parentElement;
    //     const errorDisplay = inputControl.querySelector('.error');
        
    //     if (errorDisplay) {
    //         errorDisplay.innerText = message;
    //         inputControl.classList.add('error');
    //         inputControl.classList.remove('success');
    //     } else {
    //         console.error('Error display element not found for', element);
    //     }
    // };

    //     const setSuccess = (element) => {
    //     const inputControl = element.parentElement;
    //     const errorDisplay = inputControl.querySelector('.error');
        
    //     if (errorDisplay) {
    //         errorDisplay.innerText = '';
    //         inputControl.classList.add('success');
    //         inputControl.classList.remove('error');
    //     } else {
    //         console.error('Error display element not found for', element);
    //     }
    // };
    });
    </script>
<%- include('../layouts/footer') %>