<%- include('../layouts/userheader') %>


<style>
       /* Navbar Styles */
       .navbar {
        background-color: #343a40; /* Dark background */
        padding: 1rem 1rem; /* Padding */
    }

    .navbar-brand h1 {
        color: #ffffff; /* White text for the brand name */
        font-size: 2rem; /* Adjust as needed */
    }

    .navbar-nav .nav-item .nav-link {
        color: #ffffff; /* White text for nav links */
        margin-right: 1rem; /* Spacing between links */
    }

    .navbar-nav .nav-item .nav-link:hover {
        color: #ffc107; /* Yellow text on hover */
    }

    .navbar-nav .nav-item.active .nav-link {
        color: #ffc107; /* Yellow text for the active link */
    }

    .navbar-toggler {
        border-color: rgba(255, 255, 255, 0.1); /* Light border for toggler */
    }

    .navbar-toggler .navbar-toggler-icon {
        background-image: url("data:image/svg+xml;...");
    }

    /* Breadcrumb Section Styles */
    .breadcrumb-option {
        background: #f8f9fa; /* Light background */
        padding: 3.5rem 0; /* Padding */
        margin-bottom: 70px; /* Adjust the margin as needed */
    }

    .breadcrumb__text h4 {
        text-align: center; /* Center the text */
        margin: 0; /* Remove margin */
        font-size: 40px; /* Adjust as needed */
        color: #333333; /* Dark text color */
    }

    .breadcrumb__links {
        text-align: center; /* Center the breadcrumb links */
        font-size: 1rem; /* Adjust as needed */
        color: #777777; /* Light grey color */
    }

    /* Ensure breadcrumb links have some margin and are styled correctly */
    .breadcrumb__links a {
        color: #007bff; /* Primary color for links */
        text-decoration: none; /* Remove underline */
    }

    .breadcrumb__links a:hover {
        text-decoration: underline; /* Underline on hover */
    }

    .breadcrumb__links span {
        color: #333; /* Dark color for current page */
    }
   
   .bg-black {
       background-color: #000000;
   }
   
   .topper {
       color: #ffffff;
   }
   
   .topper .icon {
       font-size: 18px;
       color: #ffffff;
   }
   
   .topper .text {
       color: #ffffff;
   }
   
   .hero-wrap {
       padding: 60px 0;
       color: #ffffff;
       text-align: center;
   }
   
   .bread {
       font-size: 36px;
       margin-bottom: 0;
   }
   .left-sidebar {
     background: #f8f9fa;
     padding: 20px;
     border-radius: 5px;
     margin-bottom: 30px;
   }
   
   .sidebar-options {
     list-style: none;
     padding: 0;
     margin: 0;
   }
   
   .sidebar-options li {
     margin-bottom: 15px;
   }
   
   .sidebar-options li a {
     text-decoration: none;
     color: #333;
     font-size: 16px;
     display: block;
     padding: 10px 15px;
     border-radius: 5px;
     transition: background 0.3s, color 0.3s;
   }
   
   .sidebar-options li.active a,
   .sidebar-options li a:hover {
     background: #007bff;
     color: #fff;
   }

   /* Sidebar Styling */
.left-sidebar {
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 5px;
    margin-bottom: 20px;
}

.sidebar-options {
    list-style: none;
    padding: 0;
    margin: 0;
}

.sidebar-options li {
    margin-bottom: 10px;
}

.sidebar-options li a {
    color: #333;
    text-decoration: none;
    display: block;
    padding: 10px;
    border-radius: 5px;
    transition: background-color 0.3s;
}

.sidebar-options li a:hover,
.sidebar-options li.active a {
    background-color: #007bff;
    color: #fff;
}

/* Form Header */
.form-header {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 20px;
}

.add-product-btn {
    background-color: #28a745;
    color: #fff;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.add-product-btn:hover {
    background-color: #218838;
}

/* Button Group Styling */
.button-group {
    display: flex;
    gap: 10px;
}

.edit-btn {
    background-color: #ffc107;
    color: #fff;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.edit-btn:hover {
    background-color: #e0a800;
}

.delete-btn {
    background-color: #dc3545;
    color: #fff;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.delete-btn:hover {
    background-color: #c82333;
}

/* Form Styling */
.billing-form .form-group {
    margin-bottom: 20px;
}

.billing-form .form-control {
    border-radius: 5px;
    padding: 10px;
}

.select-wrap {
    position: relative;
}

.select-wrap .icon {
    position: absolute;
    top: 50%;
    right: 10px;
    transform: translateY(-50%);
    pointer-events: none;
}

.select-wrap select {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    padding-right: 30px;
}



.modal-dialog.modal-lg {
    /* max-width: 90%; */
}

.modal-content {
    max-height: 80vh;
    overflow-y: auto;
}

.container {
    padding: 15px;
}

.error {
    color: red;
    font-size: 0.875em;
    margin-top: 5px;
  }

  .success input {
    border-color: green;
  }

  .error input {
    border-color: red;
  }


  .hero-wrap {
    position: relative;
    padding: 1rem 0; /* Reduced padding */
    background-size: cover;
    background-repeat: no-repeat;
}

.hero-bread .text-center {
    position: relative;
}

.add-product-btn {
    background: #007bff;
    color: #fff;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    transition: background 0.3s;
    position: absolute;
    top: 50%;
    right: 0;
    transform: translateY(-50%);
    margin-right: 15px; /* Adjust the margin as needed */
}

.add-product-btn:hover {
    background: #0056b3;
}


.ftco-section {
    padding: 3rem 0;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
}

/* .left-sidebar {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 1.5rem;
}

.sidebar-options {
    list-style: none;
    padding: 0;
    margin: 0;
}

.sidebar-options li {
    margin-bottom: 1rem;
}

.sidebar-options li a {
    text-decoration: none;
    color: #343a40;
    font-weight: bold;
    transition: color 0.3s;
}

.sidebar-options li a:hover,
.sidebar-options li.active a {
    color: #007bff;
} */

.ftco-animate {
    animation: fadeInUp 0.5s both;
}

.addresses-list {
    background: #fff;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.address-item {
    border-bottom: 1px solid #e9ecef;
    padding-bottom: 1rem;
    margin-bottom: 1rem;
}

.address-item:last-child {
    border-bottom: none;
    margin-bottom: 0;
}

.address-item h5 {
    font-size: 1.25rem;
    margin-bottom: 0.5rem;
}

.address-item p {
    margin: 0.25rem 0;
    color: #6c757d;
}

.button-group {
    margin-top: 1rem;
}

.btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    transition: background 0.3s;
}

.edit-btn {
    background: #ffc107;
    color: #fff;
}

.edit-btn:hover {
    background: #e0a800;
}

.delete-btn {
    background: #dc3545;
    color: #fff;
    margin-left: 0.5rem;
}

.delete-btn:hover {
    background: #c82333;
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}




.order-details {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: #f9f9f9;
}

.order-info,
.address-details {
    flex: 1;
}

.order-info {
    margin-right: 20px;
}

.order-summary-label {
    font-weight: bold;
    color: #333;
}

.order-summary-text {
    color: #555;
}

.address-details {
    text-align: right;
}

.address-details p {
    margin: 0;
}


/* Container Styling */
.order-summary {
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: #f9f9f9;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
}

/* Flexbox for Order Details */
.order-details {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 20px;
}

.order-info,
.address-details {
    flex: 1;
}

.order-info {
    margin-right: 20px;
}

.order-summary-label {
    font-weight: bold;
    color: #333;
}

.order-summary-text {
    color: #555;
}

/* Align Address Details to Right */
.address-details {
    text-align: right;
}

.address-details p {
    margin: 0;
}


/* Table Styling */
.table {
    width: 100%;
    margin-bottom: 20px;
    border-collapse: collapse;
}

.table th,
.table td {
    padding: 12px;
    border: 1px solid #ddd;
    text-align: center;
}

.table th {
    background-color: #343a40;
    color: #fff;
}

.table-striped tbody tr:nth-of-type(odd) {
    background-color: #f2f2f2;
}

.table-striped tbody tr:hover {
    background-color: #e9ecef;
}

/* Image Styling */
.variant-image {
    max-width: 60px;
    height: auto;
    border-radius: 4px;
}


/* Align Status to Right */
.order-summary-footer .text-right {
    text-align: right;
}

.custom-btn {
    margin-right: 10px;
}



.btn-danger {
    background-color: #dc3545;
    border-color: #dc3545;
}

/* Hover Effects */
.order-info:hover,
.address-details:hover {
    background-color: #f1f1f1;
    border-radius: 4px;
    transition: background-color 0.3s ease;
}

.table tbody tr:hover td {
    background-color: #e9ecef;
    transition: background-color 0.3s ease;
}

.pagination-controls {
    text-align: center;
}

.pagination-controls .btn {
    margin: 0 5px;
}


/* Define the status colors with higher specificity */
.order-summary-footer .status-canceled {
    color: red !important;
}

.order-summary-footer .status-Delivered {
    color: green !important;
}

.order-summary-footer .status-out-for-delivery {
    color: orange !important;
}

.order-summary-footer .status-dispatched {
    color: blue !important;
}

.order-summary-footer .status-pending {
    color: gray !important;
}
   </style>
     <!-- Navbar section -->
     <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
       <div class="container">
           <a class="navbar-brand" href="#"><h1 class="logoname">GAMZY</h1></a>
           <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
               <span class="oi oi-menu"></span> Menu
           </button>
   
           <div class="collapse navbar-collapse" id="ftco-nav">
               <ul class="navbar-nav ml-auto">
                   <li class="nav-item"><a href="/" class="nav-link">Home</a></li>
                   <li class="nav-item dropdown active">
                       <a class="nav-link" href="#" aria-haspopup="true" aria-expanded="false">Shop</a>
                       <!-- Add dropdown content if needed -->
                   </li>
                   <li class="nav-item"><a href="about.html" class="nav-link">About</a></li>
                   <li class="nav-item"><a href="blog.html" class="nav-link">Blog</a></li>
                   <li class="nav-item"><a href="contact.html" class="nav-link">Contact</a></li>
                   <li class="nav-item cta cta-colored"><a href="/user/productCart" class="nav-link"><span class="fas fa-shopping-cart"></span></a></li>
               </ul>
           </div>
       </div>
   </nav>
  
<!-- Breadcrumb Section Begin -->
<section class="breadcrumb-option">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="breadcrumb__text">
                    <h4>My Orders</h4>
                    <!-- <div class="breadcrumb__links">
                        <a href="./index.html">Home</a>
                        <a href="./shop.html">Shop</a>
                        <span>Check Out</span>
                    </div> -->
                </div>
            </div>
        </div>
    </div>
</section>
<section class="ftco-section">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-3">
                <div class="left-sidebar">
                    <ul class="sidebar-options">
                        <li class="active"><a href="/user/myaccount">My Profile</a></li>
                        <li><a href="/user/Userorders">Orders</a></li>
                        <li><a href="/user/address">Address</a></li>
                        <li><a href="/user/wallet">Wallet</a></li>
                        <li><a href="/user/signout">Signout</a></li>
                    </ul>
                </div>
            </div>
            <div class="col-md-9 ftco-animate">
                <% if (orders.length === 0) { %>
                    <div class="alert alert-info">
                        No orders found.
                    </div>
                <% } else { %>
                    <% orders.forEach(order => { %>
                    <div class="order-summary">
                        <div class="order-details">
                            <div class="order-info">
                                <p><strong class="order-summary-label">Order ID:</strong> <span class="order-summary-text"><%= order.orderId %></span></p>
                                <p><strong class="order-summary-label">Total Amount:</strong> <span class="order-summary-text">₹<%= order.totalAmount.toFixed(2) %></span></p>
                                <p><strong class="order-summary-label">Ordered Date:</strong> <span class="order-summary-text"><%= new Date(order.orderDate).toLocaleString() %></span></p>
                                <p><strong class="order-summary-label">Payment Status:</strong> 
                                    <span class="order-summary-text">
                                        <% 
                                        const allDelivered = order.products.every(product => product.status === 'Delivered');
                                        if (allDelivered) { 
                                        %>
                                            Paid
                                        <% } else { %>
                                            <%= order.paymentStatus %>
                                        <% } %>
                                    </span>
                                </p>
                            </div>
                            <div class="address-details">
                                <p><strong class="order-summary-label">Ship to:</strong> <span class="order-summary-text"><%= order.address.name %></span></p>
                                <p><strong class="order-summary-label">Delivery Address:</strong><br>
                                    <span class="order-summary-text">
                                        <%= order.address.address %>, <br>
                                        <%= order.address.Landmark %>, <br>
                                        <%= order.address.city %>, <%= order.address.state %> <%= order.address.pincode %><br>
                                        +<%= order.address.number %>
                                    </span>
                                </p>
                            </div>
                        </div>
                        <% if (order.paymentStatus === 'Pending' && order.PaymentMethod === 'razerpay') { %>
                            <div class="alert alert-warning">
                                Payment is pending. Please retry.
                                <a href="/user/retry-payment/<%= order._id %>" class="btn btn-primary btn-sm btn-retry-payment">Retry Payment</a>
                            </div>
                        <% } %>
                        <h3 class="mt-4 mb-3">Products</h3>
                        <table class="table table-striped table-bordered">
                            <thead class="thead-dark">
                                <tr>
                                    <th>Image</th>
                                    <th>Product</th>
                                    <th>Quantity</th>
                                    <th>Total</th>
                                    <th>Action</th>
                                    <th>Status</th> <!-- Added Status column -->
                                </tr>
                            </thead>
                            <tbody>
                                <% order.products.forEach(product => { %>  
                                    <% const variant = product.productId.variants.find(v => v._id.toString() === product.variantId.toString()); %>
                                    <tr>
                                        <% if (variant && variant.images && variant.images.length > 0) { %>
                                            <td><img src="/uploads/<%= variant.images[0] %>" alt="Product image" class="variant-image"></td>
                                        <% } else { %>
                                            <td><img src="/path/to/default/image.jpg" alt="Default Image" class="variant-image"></td>
                                        <% } %>
                                        <td>
                                            <%= product.productId.productname %> <br>
                                            <%= variant.color %>
                                        </td>
                                        <td><%= product.quantity %></td>
                                        <td>₹<%= (product.price * product.quantity).toFixed(2) %></td>
                                        <td>
                                            <% if (product.returnStatus === 'Requested') { %>
                                                <!-- No buttons when return status is Requested -->
                                            <% } else if (product.status === 'Delivered' && !product.returnStatus) { %>
                                                <a href="/return-order/<%= order._id %>" class="btn btn-warning btn-lg custom-btn">Return</a>
                                            <% } else if (product.returnStatus === 'Return Confirmed') { %>
                                                <!-- No buttons for returned products -->
                                            <% } else if (product.status === 'Canceled') { %>
                                                <!-- No buttons for canceled products -->
                                            <% } else if (product.status === 'Rejected' && product.returnStatus === 'Rejected') { %>
                                                <!-- No buttons for rejected returns -->
                                            <% } else { %>
                                                <a href="/cancel-order/<%= order._id %>?productId=<%= product.productId._id %>&variantId=<%= variant._id %>" class="btn btn-danger btn-lg custom-btn">Cancel</a>
                                            <% } %>
                                        </td>
                                        <td>
                                            <% if (product.returnStatus === 'Requested') { %>
                                                <span class="status-return-requested">Return Requested</span>
                                            <% } else if (product.status === 'Canceled') { %>
                                                <span class="status-canceled">Canceled</span>
                                            <% } else if (product.returnStatus === 'Return Confirmed') { %>
                                                <span class="status-returned">Returned</span>
                                            <% } else if (product.returnStatus === 'Rejected') { %>
                                                <span class="status-return-rejected">Return Rejected</span>
                                            <% } else if (product.status === 'Delivered') { %>
                                                <span class="status-delivered">Delivered</span>
                                            <% } else if (product.status === 'Out For Delivery') { %>
                                                <span class="status-out-for-delivery">Out For Delivery</span>
                                            <% } else if (product.status === 'Dispatched') { %>
                                                <span class="status-dispatched">Dispatched</span>
                                            <% } else { %>
                                                <span class="status-pending">Pending</span>
                                            <% } %>
                                        </td>
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>
                     
                    </div>
                    <% }); %>

                    <!-- Pagination controls -->
                    <div class="pagination-controls mt-4">
                        <% if (currentPage > 1) { %>
                            <a href="?page=<%= currentPage - 1 %>" class="btn btn-primary">Previous</a>
                        <% } %>
                        <% for (let i = 1; i <= totalPages; i++) { %>
                            <a href="?page=<%= i %>" class="btn <%= i === currentPage ? 'btn-secondary' : 'btn-primary' %>"><%= i %></a>
                        <% } %>
                        <% if (currentPage < totalPages) { %>
                            <a href="?page=<%= currentPage + 1 %>" class="btn btn-primary">Next</a>
                        <% } %>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</section>
<!-- Cancel Order Modal -->
<div class="modal fade" id="cancelOrderModal" tabindex="-1" role="dialog" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancelOrderModalLabel">Reason for Cancellation</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="cancelOrderForm">
                <div class="modal-body">
                    <input type="hidden" id="orderId" name="orderId" value="">
                    <div class="form-group">
                        <label for="cancelReason">Reason:</label>
                        <textarea class="form-control" id="cancelReason" name="cancelReason" rows="3" required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-danger">Cancel Order</button>
                </div>
            </form>
        </div>
    </div>
</div>


<!-- Return Order Modal -->
<div id="returnOrderModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Return Order</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="returnOrderForm">
                    <input type="hidden" id="orderId" name="orderId">
                    <div class="form-group">
                        <label for="returnReason">Return Reason</label>
                        <textarea id="returnReason" name="returnReason" class="form-control" rows="3" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Submit Return Request</button>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- Bootstrap JS and dependencies -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
   
   <script src="/js/jquery.min.js"></script>
   <script src="/js/jquery-migrate-3.0.1.min.js"></script>
   <script src="/js/popper.min.js"></script>
   <script src="/js/bootstrap.min.js"></script>
   <script src="/js/jquery.easing.1.3.js"></script>
   <script src="/js/jquery.waypoints.min.js"></script>
   <script src="/js/jquery.stellar.min.js"></script>
   <script src="/js/owl.carousel.min.js"></script>
   <script src="/js/jquery.magnific-popup.min.js"></script>
   <script src="/js/aos.js"></script>
   <script src="/js/jquery.animateNumber.min.js"></script>
   <script src="/js/bootstrap-datepicker.js"></script>
   <script src="/js/scrollax.min.js"></script>
   <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBVWaKrjvy3MaE7SQ74_uJiULgl1JY0H2s&sensor=false"></script>
   <script src="/js/google-map.js"></script>
   <script src="/js/main.js"></script>
   
   <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


   <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
<script>
    $(document).ready(function() {
        // When a cancel button is clicked, show SweetAlert confirmation
        $('.btn.btn-danger').on('click', function() {
            const orderId = $(this).attr('href').split('/').pop();
            Swal.fire({
                title: 'Are you sure?',
                text: "Do you really want to cancel this order?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, cancel it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $('#orderId').val(orderId);
                    $('#cancelOrderModal').modal('show');
                }
            });
            return false; // Prevent default anchor behavior
        });

        // Handle cancel form submission
        $('#cancelOrderForm').on('submit', function(event) {
            event.preventDefault();
            const orderId = $('#orderId').val();
            const cancelReason = $('#cancelReason').val();

            $.ajax({
                url: `/user/cancel-order/${orderId}`, // Adjusted URL
                method: 'POST',
                data: { cancelReason },
                success: function(response) {
                    if (response.success) {
                        $('#cancelOrderModal').modal('hide');
                        Swal.fire(
                            'Cancelled!',
                            'Your order has been cancelled.',
                            'success'
                        ).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire(
                            'Failed!',
                            'Failed to cancel order: ' + response.message,
                            'error'
                        );
                    }
                },
                error: function() {
                    Swal.fire(
                        'Error!',
                        'An error occurred. Please try again.',
                        'error'
                    );
                }
            });
        });

        // When a return button is clicked, show SweetAlert confirmation
        $('.btn.btn-warning').on('click', function() {
            const orderId = $(this).attr('href').split('/').pop();
            Swal.fire({
                title: 'Are you sure?',
                text: "Do you really want to return this order?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, return it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $('#orderId').val(orderId);
                    $('#returnOrderModal').modal('show');
                }
            });
            return false; // Prevent default anchor behavior
        });

        // Handle return form submission
        $('#returnOrderForm').on('submit', function(event) {
            event.preventDefault();
            const orderId = $('#orderId').val();
            const returnReason = $('#returnReason').val();

            $.ajax({
                url: `/user/return-order/${orderId}`,
                method: 'POST',
                data: { returnReason },
                success: function(response) {
                    if (response.success) {
                        $('#returnOrderModal').modal('hide');
                        Swal.fire(
                            'Returned!',
                            'Your order has been returned.',
                            'success'
                        ).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire(
                            'Failed!',
                            'Failed to return order: ' + response.message,
                            'error'
                        );
                    }
                },
                error: function() {
                    Swal.fire(
                        'Error!',
                        'An error occurred. Please try again.',
                        'error'
                    );
                }
            });
        });
    });
</script>

   <script>
    $(document).ready(function(){

    var quantitiy=0;
       $('.quantity-right-plus').click(function(e){
            
            // Stop acting like a button
            e.preventDefault();
            // Get the field name
            var quantity = parseInt($('#quantity').val());
            
            // If is not undefined
                
                $('#quantity').val(quantity + 1);

              
                // Increment
            
        });

         $('.quantity-left-minus').click(function(e){
            // Stop acting like a button
            e.preventDefault();
            // Get the field name
            var quantity = parseInt($('#quantity').val());
            
            // If is not undefined
          
                // Increment
                if(quantity>0){
                $('#quantity').val(quantity - 1);
                }
        });
        
    });
    document.addEventListener("DOMContentLoaded", function() {
    var currentLocation = window.location.href;
    var menuItem = document.querySelectorAll(".sidebar-options li a");

    // Loop through all sidebar items
    menuItem.forEach(function(item) {
        // Check if the href attribute of the link matches the current URL
        if (item.href === currentLocation) {
            // Add 'active' class to the parent <li> element
            item.parentElement.classList.add("active");
        } else {
            // Remove 'active' class if it's not the current URL
            item.parentElement.classList.remove("active");
        }
    });
});
</script>
<script>
    document.addEventListener("DOMContentLoaded", function() {
        document.querySelectorAll('.btn-retry-payment').forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();

                const retryUrl = this.getAttribute('href');

                fetch(retryUrl)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const options = {
                                key: 'rzp_test_qPtwviU68jrUXP', // Replace with your actual Razorpay key
                                amount: data.razorpayOrder.amount,
                                currency: data.razorpayOrder.currency,
                                name: 'Your Company Name',
                                description: 'Order Payment',
                                order_id: data.razorpayOrder.id,
                                handler: function (response) {
                                    // Handle successful payment here
                                    fetch('/user/update-payment-status', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({
                                            orderId: data.razorpayOrder.receipt,
                                            paymentId: response.razorpay_payment_id,
                                            signature: response.razorpay_signature
                                        })
                                    })
                                    .then(res => res.json())
                                    .then(result => {
                                        if (result.success) {
                                            Swal.fire({
                                                icon: 'success',
                                                title: 'Payment Successful',
                                                text: 'Your payment was processed successfully.',
                                                confirmButtonText: 'OK'
                                            }).then(() => {
                                                window.location.href = "/user/Userorders";
                                            });
                                        } else {
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Update Failed',
                                                text: 'Failed to update payment status. Please contact support.',
                                                confirmButtonText: 'OK'
                                            });
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Error:', error);
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Error',
                                            text: 'An error occurred while updating payment status. Please try again.',
                                            confirmButtonText: 'OK'
                                        });
                                    });
                                },
                                prefill: {
                                    name: 'Customer Name',
                                    email: 'customer@example.com',
                                    contact: 'Customer Phone Number'
                                },
                                theme: {
                                    color: '#3399cc'
                                }
                            };

                            // Initialize Razorpay and open the modal
                            const rzp = new Razorpay(options);
                            rzp.open();
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Order Creation Failed',
                                text: 'Failed to create Razorpay order. Please try again.',
                                confirmButtonText: 'OK'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred. Please try again.',
                            confirmButtonText: 'OK'
                        });
                    });
            });
        });
    });
</script>

<%- include('../layouts/footer') %>