<%- include('../layouts/userheader.ejs') %>
  <!-- FontAwesome CDN -->


  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
      .input-wrapper {
          position: relative;
      }
      .input-wrapper .toggle-password {
          position: absolute;
          top: 50%;
          right: 10px;
          transform: translateY(-50%);
          cursor: pointer;
      }
body {
  margin: 0;
  color: #4b537b;
  background:#61557d;
  font: 600 16px/18px 'Open Sans', sans-serif;
}

/* styles.css */
.input-wrapper {
    position: relative;
    width: 100%;
}

.input {
    width: 100%;
    padding: 10px;
    padding-right: 40px; /* Make room for the eye icon */
    box-sizing: border-box;
}

.password-container {
    position: relative;
}

.input {
    padding-right: 30px; /* Adjust this padding to make room for the eye icon */
}

.eye-icon {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
}


</style>

</head>
<div class="login-wrap">
    <div class="login-html">
        <a href="/user/login"><label for="tab-2" class="tab">Sign In</label></a>
        <label for="tab-2" class="tab">Sign Up</label>
     
        <div class="login-form">
            <div class="sign-up-htm">
                <form action="/user/signUp" method="post" id="form">
                    <div class="group">
                        <label for="user" class="label">Username</label>
                        <div class="input-wrapper">
                            <input id="name" name="name" type="text" class="input">
                            <div class="error"></div>
                        </div>
                    </div>
                    <div class="group">
                        <label for="email" class="label">Email Address</label>
                        <div class="input-wrapper">
                            <input id="email" name="email" type="text" class="input">
                            <div class="error"></div>
                        </div>
                    </div>
                    <div class="group">
                        <label for="pass" class="label">Password</label>
                        <div class="input-wrapper">
                            <input id="password" name="password" type="password"  class="input" >
                            <span id="togglePassword" class="eye-icon">üëÅÔ∏è‚Äçüó®Ô∏è</span>
                            <div class="error"></div>
                        </div>
                    </div>
                    <div class="group">
                        <label for="phone" class="label">Phone Number</label>
                        <div class="input-wrapper">
                            <input id="phone" name="phonenumber" type="text" class="input" data-type="phone">
                            <div class="error"></div>
                        </div>
                    </div>
                    <div class="group">
                        <input type="submit" class="button" value="GET OTP">
                    </div>
                    <!-- <div class="hr"></div>
                    <div class="foot-lnk">
                        <label><a href="" style="color: rgb(247, 235, 235);">Sign in</a></label>
                    </div> -->
                </form>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('form');
    const name = document.getElementById('name');
    const email = document.getElementById('email');
    const password = document.getElementById('password');
    const phone = document.getElementById('phone');

    form.addEventListener('submit', async (e) => {
        e.preventDefault();

        validateInputs();
        if (isValid()) {
            const formData = {
                name: name.value.trim(),
                email: email.value.trim(),
                password: password.value.trim(),
                phonenumber: phone.value.trim(),
            };

            try {
                const response = await fetch('/user/signUp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData),
                });

                const result = await response.json();
                if (response.ok) {
                    Swal.fire({
                        title: 'Success',
                        text: result.message,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = '/user/verifyOTP';
                    });
                } else {
                    Swal.fire({
                        title: 'Error',
                        text: result.message,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            } catch (error) {
                console.error('Error during fetch:', error);
                alert('An error occurred. Please try again.');
            }
        }
    });

    const isValid = () => {
        return name.parentElement.classList.contains('success') &&
            email.parentElement.classList.contains('success') &&
            password.parentElement.classList.contains('success') &&
            phone.parentElement.classList.contains('success');
    };

    const setError = (element, message) => {
        const inputControl = element.closest('.input-wrapper');
        const errorDisplay = inputControl.querySelector('.error');

        errorDisplay.innerText = message;
        inputControl.classList.add('error');
        inputControl.classList.remove('success');
    };

    const setSuccess = (element) => {
        const inputControl = element.closest('.input-wrapper');
        const errorDisplay = inputControl.querySelector('.error');

        errorDisplay.innerText = '';
        inputControl.classList.add('success');
        inputControl.classList.remove('error');
    };

    const isValidEmail = (email) => {
        const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(String(email).toLowerCase());
    };

    const isValidPhoneNumber = (phone) => {
        const numericPhone = phone.replace(/\D/g, '');
        return /^[1-9]\d{9}$/.test(numericPhone);
    };

    const isvalidUsername = (name) => {
    // Regular expression to match at least one alphanumeric character
    const re = /[a-zA-Z0-9]/;
    // Check if the name contains at least one alphanumeric character
    const hasAlphanumeric = re.test(name);
    // Check if the trimmed name has non-zero length
    const isValid = name.trim().length > 0 && hasAlphanumeric;
    return isValid;
};

    const validateInputs = () => {
        const namevalue = name.value.trim();
        const emailvalue = email.value.trim();
        const passwordvalue = password.value.trim();
        const phonevalue = phone.value.trim();

        if (emailvalue === '') {
            setError(email, 'Email is required');
        } else if (!isValidEmail(emailvalue)) {
            setError(email, 'Provide a valid email address');
        } else {
            setSuccess(email);
        }

        if (passwordvalue === '') {
        setError(password, 'Password is required');
    } else if (passwordvalue.length < 8) {
        setError(password, 'Password must be at least 8 characters long');
    } else {
        setSuccess(password);
    }

        if (phonevalue === '') {
            setError(phone, 'Phone number is required');
        } else if (!isValidPhoneNumber(phonevalue)) {
            if (/^\d{10}$/.test(phonevalue)) {
                setError(phone, 'Phone number must not start with 0 and must be exactly 10 digits');
            } else {
                setError(phone, 'Phone number must be exactly 10 digits');
            }
        } else {
            setSuccess(phone);
        }

        if (namevalue === '') {
            setError(name, 'Username is required');
        } else if (!isvalidUsername(namevalue)) {
            setError(name, 'The name does not contain special characters');
        } else {
            setSuccess(name);
        }
    };
});


</script>
<script>
    document.getElementById('togglePassword').addEventListener('click', function () {
        const passwordInput = document.getElementById('password');
        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordInput.setAttribute('type', type);
  
        // Toggle the eye / eye slash icon
        this.textContent = type === 'password' ? 'üëÅÔ∏è‚Äçüó®Ô∏è' : 'üëÅÔ∏è';
    });
  </script>



<!-- 
<script>

    const form = document.getElementById('form');
    const name = document.getElementById('name');
    const email = document.getElementById('email');
    const password = document.getElementById('password');
        const phone = document.getElementById('phone');
        
    
        form.addEventListener('submit', e => {
          e.preventDefault();
    
          validateInputs();
          if (isValid()) {
            form.submit();
      }
    });
    
    const isValid = ()=>{
        return name.parentElement.classList.contains('success')&&
        email.parentElement.classList.contains('success')&&
        password.parentElement.classList.contains('success')&&
        phone.parentElement.classList.contains('success')
    }
    const setError = (element, message) => {
      const inputControl = element.parentElement;
      const errorDisplay = inputControl.querySelector('.error');
    
      errorDisplay.innerText = message;
      inputControl.classList.add('error');
      inputControl.classList.remove('success')
    }
    const setSuccess = element => {
      const inputControl = element.parentElement;
      const errorDisplay = inputControl.querySelector('.error');
    
      errorDisplay.innerText = '';
      inputControl.classList.add('success');
      inputControl.classList.remove('error');
    };
    const isValidEmail = email => {
      const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      return re.test(String(email).toLowerCase());
    }
    const isValidPhoneNumber = phone => {
    // Remove any non-numeric characters
    const numericPhone = phone.replace(/\D/g, '');

    // Check if the remaining string consists of exactly 10 digits
    // and the first digit is not '0'
    return /^[1-9]\d{9}$/.test(numericPhone);
}

const isvalidUsername = name => {
    const re = /^[a-zA-Z0-9-+()]*$/; // Regular expression to allow alphanumeric characters, hyphens, plus signs, and parentheses
    return re.test(name);
};
    const validateInputs = () => {
        const namevalue = name.value.trim();
        const emailvalue = email.value.trim();
        const passwordvalue = password.value.trim();
        const phonevalue = phone.value.trim();




        if(emailvalue === '') { 
          setError(email, 'Email is required');
      } else if (!isValidEmail(emailvalue)) {
          setError(email, 'Provide a valid email address');
      } else {
          setSuccess(email);
      }
      if (passwordvalue === '') {
        setError(password, 'The password is required');
      }
      else{
        setSuccess(password);
      } 
      
      if (phonevalue === '') {
        setError(phone, 'Phone number is required');
    } else if (!isValidPhoneNumber(phonevalue)) {
        if (/^\d{10}$/.test(phonevalue)) {
            setError(phone, 'Phone number must not start with 0 and must be exactly 10 digits');
        } else {
            setError(phone, 'Phone number must be exactly 10 digits');
        }
    } else {
        setSuccess(phone);
    }
     
    if (namevalue === '') {
    setError(name, 'Username is required');
    } else if (!isvalidUsername(namevalue)) {
    setError(name, 'The name does not contain special characters');
    } else {
    setSuccess(name);
    }   
    } 
    
     
    </script>  -->

<%- include('../layouts/footer.ejs') %>