<%- include('../layouts/userheader.ejs') %>

<style>
    body {
        margin: 0;
        color: #4b537b;
        background: #61557d;
        font: 600 16px/18px 'Open Sans', sans-serif;
    }
    .password-wrapper {
        position: relative;
        display: flex;
        align-items: center;
    }

    .password-wrapper .input {
        width: 100%;
    }

    .password-wrapper .fa-eye {
        position: absolute;
        right: 10px;
        cursor: pointer;
        color: white; /* Change the eye icon color to white */
    }


    
.password-container {
    position: relative;
}

.input {
    padding-right: 30px; /* Adjust this padding to make room for the eye icon */
}

.eye-icon {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
}
</style>

<div class="login-wrap">
    <div class="login-html">
        <label for="tab-2" class="tab">Reset Password</label>
        <div class="login-form">
            <div class="reset-password-htm">
                <form id="reset-password-form" action="/user/resetPassword/<%= token %>" method="post">
                    <input type="hidden" name="token" value="<%= token %>">
                    <div class="group">
                        <label for="new-password" class="label">New Password</label>
                        <div class="password-container">
                            <input id="new-password" name="password" type="password" class="input">
                            <span id="toggleNewPassword" class="eye-icon">üëÅÔ∏è‚Äçüó®Ô∏è</span>
                        </div>
                        <div class="error" id="new-password-error"></div>
                    </div>
                    <div class="group">
                        <label for="confirm-password" class="label">Confirm Password</label>
                        <div class="password-container">
                            <input id="confirm-password" name="confpassword" type="password" class="input">
                            <span id="toggleConfirmPassword" class="eye-icon">üëÅÔ∏è‚Äçüó®Ô∏è</span>
                        </div>
                        <div class="error" id="confirm-password-error"></div>
                    </div>
                    <div class="group">
                        <input type="submit" class="button" value="Update Password">
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.getElementById('toggleNewPassword').addEventListener('click', function () {
        togglePasswordVisibility('new-password', this);
    });

    document.getElementById('toggleConfirmPassword').addEventListener('click', function () {
        togglePasswordVisibility('confirm-password', this);
    });

    function togglePasswordVisibility(inputId, iconElement) {
        const passwordInput = document.getElementById(inputId);
        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordInput.setAttribute('type', type);

        // Toggle the eye / eye slash icon
        iconElement.textContent = type === 'password' ? 'üëÅÔ∏è‚Äçüó®Ô∏è' : 'üëÅÔ∏è';
    }

    const resetPasswordForm = document.getElementById('reset-password-form');
    const newPassword = document.getElementById('new-password');
    const confirmPassword = document.getElementById('confirm-password');
    const submitButton = resetPasswordForm.querySelector('input[type="submit"]');

    const passwordRequirements = {
        minLength: 8,
        hasUpperCase: /[A-Z]/,
        hasLowerCase: /[a-z]/,
        hasNumber: /\d/,
        hasSpecialChar: /[!@#$%^&*(),.?":{}|<>]/
    };

    newPassword.addEventListener('input', validatePasswords);
    confirmPassword.addEventListener('input', validatePasswords);

    resetPasswordForm.addEventListener('submit', async e => {
        e.preventDefault();
        const password = newPassword.value.trim();
        const confpassword = confirmPassword.value.trim();

        if (!validatePasswords()) return;

        submitButton.disabled = true;
        submitButton.value = 'Updating...';

        try {
            const response = await fetch(`/user/resetPassword/${document.querySelector('[name="token"]').value}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ password, confpassword }),
            });

            const result = await response.json();
            if (response.ok) {
                Swal.fire({
                    title: 'Success',
                    text: 'Password has been updated successfully!',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    window.location.href = '/user/login';
                });
            } else {
                Swal.fire({
                    title: 'Error',
                    text: result.message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        } catch (error) {
            Swal.fire({
                title: 'Error',
                text: 'An error occurred. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        } finally {
            submitButton.disabled = false;
            submitButton.value = 'Update Password';
        }
    });

    function validatePasswords() {
        const password = newPassword.value.trim();
        const confpassword = confirmPassword.value.trim();

        let isValid = true;
        let newPasswordError = '';
        let confirmPasswordError = '';

        if (password === '') {
            newPasswordError += 'Password is required.\n';
            isValid = false;
        } else {
            if (password.length < passwordRequirements.minLength) {
                newPasswordError += `Password must be at least ${passwordRequirements.minLength} characters long.\n`;
                isValid = false;
            }
            if (!passwordRequirements.hasUpperCase.test(password)) {
                newPasswordError += 'Password must contain at least one uppercase letter.\n';
                isValid = false;
            }
            if (!passwordRequirements.hasLowerCase.test(password)) {
                newPasswordError += 'Password must contain at least one lowercase letter.\n';
                isValid = false;
            }
            if (!passwordRequirements.hasNumber.test(password)) {
                newPasswordError += 'Password must contain at least one number.\n';
                isValid = false;
            }
            if (!passwordRequirements.hasSpecialChar.test(password)) {
                newPasswordError += 'Password must contain at least one special character.\n';
                isValid = false;
            }
        }

        if (confpassword === '') {
            confirmPasswordError += 'Confirmation password is required.\n';
            isValid = false;
        } else if (password !== confpassword) {
            confirmPasswordError += 'Passwords do not match.\n';
            isValid = false;
        }

        setError('new-password', newPasswordError);
        setError('confirm-password', confirmPasswordError);
        submitButton.disabled = !isValid;

        return isValid;
    }

    function setError(inputId, message) {
        const errorDisplay = document.getElementById(`${inputId}-error`);
        if (errorDisplay) {
            errorDisplay.innerText = message;
        }
    }
</script>