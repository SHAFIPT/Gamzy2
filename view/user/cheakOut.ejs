



<%- include('../layouts/Shopheader') %>

<!-- Google Font -->
<link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap"
rel="stylesheet">

    <!-- Css Styles -->
    <link rel="stylesheet" href="/css/bootstrap11.min.css" type="text/css">
    <link rel="stylesheet" href="/css/font-awesome.min.css" type="text/css">
    <link rel="stylesheet" href="/css/elegant-icons.css" type="text/css">
    <link rel="stylesheet" href="/css/magnific-popup.css" type="text/css">
    <link rel="stylesheet" href="/css/nice-select.css" type="text/css">
    <link rel="stylesheet" href="/css/owl.carousel.min.css" type="text/css">
    <link rel="stylesheet" href="/css/slicknav.min.css" type="text/css">
    <link rel="stylesheet" href="/css/style11.css" type="text/css">

    <!-- Font Awesome CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">


    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ionicons/5.5.2/collections/icon/icon.min.css">


    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/css/bootstrap.min.css">

    <!-- Your custom CSS file (if any) -->
    <link rel="stylesheet" href="/css/custom-styles.css">

    <!-- Optional: Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

    <link rel="stylesheet" href="path/to/elevatezoom.css">

    

</head>
<style>

    /* Override modal form control text color */
.modal-body .form-control {
    color: black !important; /* Ensure text color is black */
    background: white !important; /* Ensure background is white if needed */
    border: 1px solid #ced4da !important; /* Ensure border is standard */
    box-shadow: none !important; /* Remove any shadow effects */
}

 /* Navbar Styles */
 .navbar {
    background-color: #343a40; /* Dark background */
    padding: 1rem 1rem; /* Padding */
}

.navbar-brand h1 {
    color: #ffffff; /* White text for the brand name */
    font-size: 2rem; /* Adjust as needed */
}

.navbar-nav .nav-item .nav-link {
    color: #ffffff; /* White text for nav links */
    margin-right: 1rem; /* Spacing between links */
}

.navbar-nav .nav-item .nav-link:hover {
    color: #ffc107; /* Yellow text on hover */
}

.navbar-nav .nav-item.active .nav-link {
    color: #ffc107; /* Yellow text for the active link */
}

.navbar-toggler {
    border-color: rgba(255, 255, 255, 0.1); /* Light border for toggler */
}

.navbar-toggler .navbar-toggler-icon {
    background-image: url("data:image/svg+xml;...");
}

/* Center the breadcrumb text */
.breadcrumb__text h4 {
    text-align: center; /* Center the text */
    margin: 0 auto; /* Center the element */
    font-size: 2rem; /* Adjust as needed */
    color: #333333; /* Adjust color as needed */
}

.breadcrumb__links {
    text-align: center; /* Center the breadcrumb links */
    font-size: 1rem; /* Adjust as needed */
    color: #777777; /* Adjust color as needed */
}

.navbar .nav-link {
    color: #fff !important;
}

.navbar .nav-item.cta a {
    background-color: #82ae46;
    border-radius: 30px;
    padding: 5px 15px;
}

/* .addresses-list {
    margin-top: 20px;
}

.address-item {
    border: 1px solid #ddd;
    padding: 15px;
    margin-bottom: 10px;
    border-radius: 5px;
    position: relative;
    padding-left: 40px;
}

.address-item input[type="radio"] {
    position: absolute;
    top: 15px;
    left: 15px;
}

.address-item label {
    display: block;
    cursor: pointer;
}

.address-item h5 {
    margin: 0 0 5px;
}

.address-item p {
    margin: 0;
} */

.addresses-list {
    margin-top: 20px;
}

.address-item {
    border: 1px solid #ccc;
    padding: 20px;
    margin-bottom: 15px;
    border-radius: 8px;
    position: relative;
    padding-left: 50px;
    background: #f9f9f9;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: background 0.3s, box-shadow 0.3s;
}

.address-item:hover {
    background: #fff;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
}

.address-item input[type="radio"] {
    position: absolute;
    top: 20px;
    left: 20px;
}

.address-item label {
    display: block;
    cursor: pointer;
}

.address-item h5 {
    margin: 0 0 8px;
    font-size: 18px;
    font-weight: 600;
    color: #333;
}

.address-item p {
    margin: 0 0 5px;
    font-size: 14px;
    color: #666;
}

.button-group {
    margin-top: 10px;
}

.button-group .edit-btn,
.button-group .delete-btn {
    padding: 5px 10px;
    margin-right: 5px;
    border: none;
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
    transition: background 0.3s;
}

.button-group .edit-btn {
    background: #5cb85c;
    color: white;
}

.button-group .edit-btn:hover {
    background: #4cae4c;
}

.button-group .delete-btn {
    background: #d9534f;
    color: white;
}

.button-group .delete-btn:hover {
    background: #c9302c;
}

.cart__discount {
    margin-top: 20px;
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background: #fff;
}

.cart__discount h6 {
    font-size: 18px;
    margin-bottom: 10px;
    color: #333;
}

.cart__discount form {
    display: flex;
    align-items: center;
    gap: 10px; /* Adjust spacing between elements */
}

.cart__discount input[type="text"] {
    flex: 1; /* Allows the input to take up remaining space */
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    color: #333;
}

.cart__discount button {
    padding: 10px 20px; /* Added padding to make the button more visible */
    background: #5cb85c;
    border: none;
    border-radius: 5px;
    font-size: 14px;
    color: white;
    cursor: pointer;
    transition: background 0.3s;
}

.cart__discount button:hover {
    background: #4cae4c;
}
.checkout__input__checkbox {
    margin-top: 10px;
}

.site-btn {
    background: #5cb85c;
    border: none;
    border-radius: 5px;
    padding: 10px 20px;
    color: white;
    font-size: 16px;
    cursor: pointer;
    transition: background 0.3s;
}

.site-btn:hover {
    background: #4cae4c;
}

.btn-edit-address {
    background-color: #007bff; /* Blue color for Edit Address */
    border: none;
    color: white;
    padding: 10px 15px;
    margin-top: 10px;
    border-radius: 5px;
    cursor: pointer;
    text-align: center;
    display: inline-block;
    font-size: 14px;
    transition: background-color 0.3s ease;
}

.btn-edit-address:hover {
    background-color: #0056b3; /* Darker blue on hover */
}

.btn-add-address {
    background-color: #dc3545; /* Red color for Add Address */
    border: none;
    color: white;
    padding: 10px 15px;
    margin-top: 10px;
    border-radius: 5px;
    cursor: pointer;
    text-align: center;
    display: inline-block;
    font-size: 14px;
    transition: background-color 0.3s ease;
}

.btn-add-address:hover {
    background-color: #c82333; /* Darker red on hover */
}

.address-item {
    position: relative;
    padding: 15px;
    border: 1px solid #ddd;
    margin-bottom: 10px;
    border-radius: 5px;
    padding-left: 60px; /* Adjusted to make room for the edit button */
}

.address-item .btn-edit-address {
    position: absolute;
    top: 15px;
    right: 15px;
}

.address-item {
    position: relative;
    padding: 15px;
    border: 1px solid #ddd;
    margin-bottom: 10px;
    border-radius: 5px;
    padding-left: 60px; /* Adjusted to make room for the edit button */
}

.address-item .btn-edit-address {
    position: absolute;
    top: 15px;
    right: 15px;
}


/* Modal Background */
.modal-backdrop {
    background-color: rgba(0, 0, 0, 0.5); /* Dark background for modal overlay */
}

/* Modal Container */

/* Modal Content */
.modal-content {
    border-radius: 8px;
    overflow: hidden;
    background-color: #fff;
    border: 1px solid #dee2e6;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* Modal Header */
.modal-header {
    background-color: #007bff;
    color: #fff;
    border-bottom: 1px solid #ddd;
    padding: 15px;
    position: relative;
}

/* Modal Title */
.modal-title {
    font-size: 1.25rem;
    margin: 0;
    color: black; /* Ensure modal title color is black */
}

/* Close Button */
.modal-header .close {
    color: #fff;
    text-shadow: 0 1px 0 #000;
    opacity: 0.5;
}

/* Close Button Hover */
.modal-header .close:hover {
    opacity: 1;
}

/* Modal Body */
.modal-body {
    padding: 15px;
    font-size: 1rem;
    color: black; /* Change text color inside the modal body */
}

/* Modal Footer */
.modal-footer {
    background-color: #f1f1f1;
    border-top: 1px solid #ddd;
    padding: 15px;
}

/* Button Styles */
.modal-footer .btn {
    margin: 0;
    border-radius: 5px;
    transition: background-color 0.3s;
    color: black; /* Ensure text color of buttons is black */
}

.modal-footer .btn-primary {
    background-color: #007bff;
    color: #fff;
    border: none;
}

.modal-footer .btn-primary:hover {
    background-color: #0056b3;
}

.modal-footer .btn-secondary {
    background-color: #6c757d;
    color: #fff;
    border: none;
}

.modal-footer .btn-secondary:hover {
    background-color: #5a6268;
}

/* Form Elements */
.modal-body .form-group {
    margin-bottom: 1rem;
}

.modal-body .form-control {
    border-radius: 4px;
    padding: 0.75rem 1.25rem;
    border: 1px solid #ced4da;
    color: black; /* Ensure input text color is black */
}

/* Modal Scroll */
.modal-content {
    max-height: 80vh;
    overflow-y: auto;
}

/* Error and Success Styling */
.error {
    color: red;
    font-size: 0.875em;
    margin-top: 5px;
}

.success input {
    border-color: green;
}

.error input {
    border-color: red;
}





.checkout__total__all li:last-child {
    border-bottom: none;
}

#subtotal {
    font-weight: normal;
    color: #d9534f; /* Red color for discount */
    font-weight: bold;
}

#discount {
    color: #d9534f; /* Red color for discount */
    font-weight: bold;
    text-decoration: underline;
}

#total {
    font-weight: bold;
    font-size: 18px;
    color: #fe0b0b; /* Blue color for total */
}

#total-amount {
    border-top: 2px solid #e90404; /* Underline for total amount */
    padding-top: 5px;
    font-size: 20px;
}








/* Discount Codes Section Styles */
.cart__discount {
    margin-top: 20px;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background: #e7ebe9;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.cart__discount h6 {
    font-size: 1.25rem;
    margin-bottom: 15px;
    color: #333;
    font-weight: bold;
}

.cart__discount form {
    display: flex;
    align-items: center;
    gap: 10px; /* Spacing between input and button */
}

.cart__discount input[type="text"] {
    flex: 1; /* Takes up the remaining space */
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1rem;
    color: #333;
    box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
}

.cart__discount input[type="text"]::placeholder {
    color: #888;
}

.cart__discount button {
    padding: 12px 20px;
    background-color: #007bff; /* Primary blue color */
    border: none;
    border-radius: 5px;
    color: #fff;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s, box-shadow 0.3s;
}

.cart__discount button:hover {
    background-color: #0056b3; /* Darker blue on hover */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

/* Hide Available Coupons Section by Default */
.available-coupons {
    display: none; /* Hidden by default */
    margin-top: 20px;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background: #ffffff;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.available-coupons h6 {
    font-size: 1.25rem;
    margin-bottom: 15px;
    color: #333;
    font-weight: bold;
}

.available-coupons ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

.available-coupons li {
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 10px;
    margin-bottom: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.available-coupons li span {
    font-size: 1rem;
    color: #333;
}

.available-coupons li button {
    padding: 8px 15px;
    background-color: #28a745; /* Green color for Apply button */
    border: none;
    border-radius: 5px;
    color: #fff;
    font-size: 0.875rem;
    cursor: pointer;
    transition: background-color 0.3s;
}

.available-coupons li button:hover {
    background-color: #218838; /* Darker green on hover */
}

/* Toggle Button Styling */
.toggle-coupons-button {
    margin-top: 20px;
    padding: 10px 15px;
    background-color: #007bff; /* Primary blue color */
    border: none;
    border-radius: 5px;
    color: #fff;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s, box-shadow 0.3s;
}

.toggle-coupons-button:hover {
    background-color: #0056b3; /* Darker blue on hover */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

/* Style for the total list item */
#total-item {
    font-size: 20px; /* Font size for "Total" text */
    margin: 10px 0; /* Spacing above and below */
}

/* Style for the "Total" text */
#total-item::before {
    content: 'Total'; /* Text before the amount */
    font-size: 20px; /* Font size for "Total" */
    font-weight: bold; /* Make the text bold */
}

/* Style for the total amount */
#total-amount {
    font-size: 28px; /* Larger font size for the amount */
    color: #d32f2f; /* Color for the total amount */
    font-weight: bold; /* Bold text for emphasis */
}

/* Style for the rupee symbol and amount */
#total {
    display: flex;
    align-items: center;
    font-size: 28px; /* Match the font size of the total amount */
}

/* Style for the rupee symbol before the amount */
#total::before {
    content: '₹'; /* Rupee symbol */
    font-size: 28px; /* Same size as the total amount */
    color: #d32f2f; /* Match the color with the total amount */
    margin-right: 5px; /* Space between the symbol and amount */
}



/* Add your existing CSS */
.checkout__input__checkbox {
    position: relative;
    display: block;
    cursor: pointer;
    user-select: none;
    padding-left: 35px; /* Adds padding to the left of the label text */
    margin-bottom: 12px;
    font-size: 22px;
    line-height: 25px;
}

.checkout__input__checkbox input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
}

.checkmark {
    position: absolute;
    top: 0;
    left: 0;
    height: 25px;
    width: 25px;
    background-color: #eee;
    border-radius: 5px;
}

.checkout__input__checkbox:hover input ~ .checkmark {
    background-color: #ccc;
}

.checkout__input__checkbox input:checked ~ .checkmark {
    background-color: #2196F3;
}

.checkmark:after {
    content: "";
    position: absolute;
    display: none;
}

.checkout__input__checkbox input:checked ~ .checkmark:after {
    display: block;
}

.checkout__input__checkbox .checkmark:after {
    left: 9px;
    top: 5px;
    width: 5px;
    height: 10px;
    border: solid white;
    border-width: 0 3px 3px 0;
    transform: rotate(45deg);
}




.checkout__order {
    padding: 20px;
    /* background: #fff; */
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.checkout__order__products {
    margin-bottom: 10px;
}

.product-header {
    display: flex;
    justify-content: space-between;
    font-weight: bold;
    border-bottom: 1px solid #ddd;
    padding-bottom: 5px;
    margin-bottom: 10px;
}

.checkout__total__products {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

.checkout__total__products li {
    display: flex;
    justify-content: space-between;
    border-bottom: 1px solid #eee;
    padding: 10px 0;
}

.product-name {
    flex: 1;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.product-quantity {
    flex: 0 0 50px;
    text-align: center;
}

.product-total {
    flex: 0 0 100px;
    text-align: right;
}





.logo-name {
  font-size: 36px !important; /* Ensure the font size is applied */
  font-weight: bold; /* Make the logo bold */
  color: #f1c40f !important; /* Force the color to apply */
}

.ftco-footer-widget p {
  font-size: 18px !important; /* Ensure the paragraph font size is applied */
  color: #ccc !important; /* Force the color to apply */
}

.ftco-footer {
  background: #2b2b2b;
  color: #fff;
  padding: 60px 0;
  font-family: 'Roboto', sans-serif;
}

.ftco-footer .logo-text {
  font-size: 30px;
  font-weight: bold;
  color: #f1c40f; /* Gold color for GAMZY */
  text-transform: uppercase;
  letter-spacing: 2px;
}

.ftco-footer h2 {
  font-size: 22px;
  color: #fff;
  margin-bottom: 20px;
}

.ftco-footer .ftco-heading-2 {
  font-size: 18px;
  font-weight: 600;
}

.ftco-footer-widget p {
  color: #bbb;
  font-size: 14px;
}

.ftco-footer ul {
  list-style: none;
  padding: 0;
}

.ftco-footer ul li {
  margin-bottom: 10px;
  display: flex;
  align-items: center;
  color: #bbb;
}

.ftco-footer ul li span.icon {
  margin-right: 15px;
  font-size: 18px;
  color: #f1c40f;
}

.ftco-footer ul li a {
  color: #fff;
  text-decoration: none;
}

.ftco-footer ul li a:hover {
  color: #f1c40f;
}

.ftco-footer .text-center p {
  font-size: 14px;
  color: #bbb;
  margin: 0;
}

.ftco-footer .text-center i.icon-heart {
  color: #e74c3c;
}

.ftco-footer .text-center a {
  color: #f1c40f;
}

.ftco-footer .text-center a:hover {
  color: #fff;
}

.ftco-footer .container {
  max-width: 1200px;
  margin: auto;
  padding: 0 15px;
}

@media (max-width: 768px) {
  .ftco-footer .logo-text {
    text-align: center;
    margin-bottom: 20px;
  }
  .ftco-footer .row {
    text-align: center;
  }
}




.block-23 ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.block-23 ul li {
  display: flex;
  align-items: center; /* Align icons and text vertically */
  margin-bottom: 10px;
}

.block-23 ul li span.fas {
  font-size: 18px;  /* Adjust icon size */
  color: #f1c40f; /* Gold color for the icon */
  margin-right: 15px; /* Add space between icon and text */
}

.block-23 ul li a {
  color: #fff;
  text-decoration: none;
}

.block-23 ul li a:hover {
  color: #f1c40f;
}

.block-23 ul li span.text {
  font-size: 16px; /* Adjust text size */
  color: #bbb; /* Light gray color for text */
}





.small-modal {
      width: 300px !important;
      font-size: 0.8em !important;
    }

    .small-modal .swal2-title {
      font-size: 1.5em !important;
    }

    .small-modal .swal2-content {
      font-size: 1em !important;
    }

    .small-modal .swal2-confirm {
      font-size: 0.9em !important;
      padding: 0.5em 1em !important;
    }
</style>

<body>
   <!-- Navbar section -->
   <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
        <a class="navbar-brand" href="#"><h1 class="logoname">GAMZY</h1></a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="fas fa-bars"></span> Menu
        </button>

        <div class="collapse navbar-collapse" id="ftco-nav">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item"><a href="/" class="nav-link">Home</a></li>
              
                <li class="nav-item"><a href="/user/ShopPage" class="nav-link">Shop</a></li>
                <li class="nav-item"><a href="/user/wishlist" class="nav-link">WishList</a></li>
                <li class="nav-item dropdown active">
                    <a class="nav-link" href="#" aria-haspopup="true" aria-expanded="false"><span class="fas fa-shopping-cart"></span></a>
                    <!-- Add dropdown content if needed -->
                </li>
            </ul>
        </div>
    </div>
</nav>
    <!-- End Navbar section -->
    <!-- Header Section End -->

    <!-- Breadcrumb Section Begin -->
    <section class="breadcrumb-option">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="breadcrumb__text">
                        <h4>Check Out</h4>
                        <!-- <div class="breadcrumb__links">
                            <a href="./index.html">Home</a>
                            <a href="./shop.html">Shop</a>
                            <span>Check Out</span>
                        </div> -->
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Breadcrumb Section End -->


    <section class="checkout spad">
        <div class="container">
            <p class="breadcrumbs">
                <a href="/">Home</a> &gt; 
                <a href="/user/cartPage">Cart</a> &gt; 
                <a href="/user/cheakOut">cheakOut</a>
              </p>
            <div class="checkout__form">
                <!-- <form action="/order/confirm" method="POST"> -->
                    <div class="row">
                        <div class="col-lg-8 col-md-6">
                            <h6 class="checkout__title">Billing Details</h6>
                            <div class="addresses-list">
                                <% if (addresses && addresses.length > 0) { %>
                                    <% addresses.forEach((address, index) => { %>
                                        <div class="address-item">
                                            <input type="radio" id="address<%= index %>" name="selectedAddress" value="<%= address._id %>" <%= index === 0 ? 'checked' : '' %> />
                                            <label for="address<%= index %>">
                                                <h5><%= address.Firstname %> <%= address.Lastname %></h5>
                                                <p><%= address.streetaddress %> <%= address.Landmark ? ', ' + address.Landmark : '' %></p>
                                                <p><%= address.city %>, <%= address.state %> <%= address.pincode %></p>
                                                <p>Phone: <%= address.number %></p>
                                                <p>Email: <%= address.email %></p>
                                            </label>
                                            <button class="btn-edit-address" data-id="<%= address._id %>" data-toggle="modal" data-target="#editAddressModal">Edit Address</button>
                                        </div>
                                    <% }) %>
                                <% } else { %>
                                    <p>No addresses found.</p>
                                <% } %>
                            </div>
                            <button class="btn-add-address" data-toggle="modal" data-target="#addProductModal">Add Address</button>
                        </div>
                        
                        <div class="col-lg-4 col-md-6">
                            <div class="checkout__order">
                                <h4 class="order__title">Your order</h4>
                                <div class="checkout__order__products">Product <span>Total</span></div>
                                <ul class="checkout__total__products">
                                    <% if (cart && cart.products.length > 0) { %>
                                        <% cart.products.forEach(product => { %>
                                            <li>
                                                <span class="product-name"><%= product.productId.productname.substring(0, 20) %><%= product.productId.productname.length > 20 ? '...' : '' %></span>
                                                <span class="product-quantity">x <%= product.quantity %></span>
                                                <span class="product-total">₹<%= (product.discountedPrice * product.quantity).toFixed(2) %></span>
                                            </li>
                                        <% }) %>
                                    <% } else { %>
                                        <li>Your cart is empty.</li>
                                    <% } %>
                                </ul>
                                <div class="cart__discount">
                                    <h6>Discount codes</h6>
                                    <form id="discount-form" action="#">
                                        <input type="text" id="coupon-code" placeholder="Coupon code">
                                        <button type="button" id="apply-discount">Apply</button>
                                        <button type="button" id="remove-coupon" style="display: none;">Remove</button>
                                    </form>
                                    
                                    <!-- Toggle Button for Available Coupons -->
                                    <button type="button" id="toggle-coupons" class="toggle-coupons-button">Show Available Coupons</button>
                                    
                                    <!-- Available Coupons Section -->
                                    <div class="available-coupons" id="available-coupons" style="display: none;">
                                        <h6>Available Coupons</h6>
                                        <ul id="coupons-list">
                                            <!-- Coupons will be dynamically inserted here -->
                                        </ul>
                                    </div>
                                </div>
                                <ul class="checkout__total__all">
                                    <li>Subtotal 
                                        <span>₹<span id="subtotal">
                                            <%= cart && cart.products.length > 0 ? cart.products.reduce((sum, product) => {
                                                const price = product.discountedPrice ? product.discountedPrice : product.productId.price;
                                                return sum + price * product.quantity;
                                            }, 0).toFixed(2) : 0 %>
                                        </span></span>
                                    </li>
                                    <li>Offer Discount 
                                        <span id="offerDiscount">
                                            ₹<%= cart && cart.products.length > 0 ? cart.products.reduce((sum, product) => {
                                                const discount = product.productId.price - (product.discountedPrice || product.productId.price);
                                                return sum + discount * product.quantity;
                                            }, 0).toFixed(2) : 0 %>
                                        </span>
                                    </li>
                                    <li>Coupon Discount <span id="couponDiscount">-₹0.00</span></li>
                                    <input type="hidden" id="discountAmount" value="0">
                                    <% 
                                    let subtotal = cart && cart.products.length > 0 ? cart.products.reduce((sum, product) => {
                                        const price = product.discountedPrice ? product.discountedPrice : product.productId.price;
                                        return sum + price * product.quantity;
                                    }, 0) : 0;
                                    let shippingCharge = subtotal < 500 ? 50 : 0;
                                    %>
                                    <li>Shipping Charge <span id="shippingCharge">₹<%= shippingCharge.toFixed(2) %></span></li>
                                    <li id="total-item">
                                        <span id="total-amount">
                                            <span id="total">
                                                <%= (subtotal + shippingCharge).toFixed(2) %>
                                            </span>
                                        </span>
                                    </li>
                                </ul>
                                <!-- <input type="hidden" id="discountAmount" value="0"> -->
                                <div class="checkout__input__checkbox">
                                    <label for="Cashondelivary">
                                        Cash on Delivery
                                        <input type="checkbox" id="Cashondelivary" class="payment-method">
                                        <span class="checkmark"></span>
                                    </label>
                                </div>
                                <div class="checkout__input__checkbox">
                                    <label for="wallet">
                                        Wallet (Balance: ₹<span id="wallet-balance"><%= walletBalance %></span>)
                                        <input type="checkbox" id="wallet" class="payment-method">
                                        <span class="checkmark"></span>
                                    </label>
                                </div>
                                <div class="checkout__input__checkbox">
                                    <input type="hidden" id="total-amount-hidden" value="<%= cart && cart.products.length > 0 ? cart.products.reduce((sum, product) => {
                                        const price = product.discountedPrice ? product.discountedPrice : product.productId.price;
                                        return sum + price * product.quantity;
                                    }, 0).toFixed(2) : 0 %>">
                                    <label for="razerpay">
                                        Razor Pay
                                        <input type="checkbox" id="razerpay" class="payment-method">
                                        <span class="checkmark"></span>
                                    </label>
                                </div>
                                <button type="button" id="placeOrderButton" class="site-btn">PLACE ORDER</button>
                            </div>
                        </div>
                </div>
            <!-- </form> -->
        </div>
    </div>
</section>
    

    <!-- Footer Section Begin -->
 <footer class="ftco-footer ftco-section">
    <div class="container">
        <div class="row">
            <div class="col-md">
                <div class="ftco-footer-widget mb-4">
                    <h2 class="ftco-heading-2 logo-name">GAMZY</h2>
                    <p>Your one-stop shop for gaming accessories.</p>
                </div>
            </div>
            <div class="col-md">
              <div class="ftco-footer-widget mb-4">
                <h2 class="ftco-heading-2">Have a Question?</h2>
                <div class="block-23 mb-3">
                  <ul>
                    <li>
                      <span class="fas fa-map-marker-alt"></span>
                      <span class="text">203 Fake St. Mountain View, San Francisco, California, USA</span>
                    </li>
                    <li>
                      <a href="#"><span class="fas fa-phone-alt"></span><span class="text">+2 392 3929 210</span></a>
                    </li>
                    <li>
                      <a href="#"><span class="fas fa-envelope"></span><span class="text">info@yourdomain.com</span></a>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 text-center">
                <p>
                    Copyright &copy;<script>document.write(new Date().getFullYear());</script> All rights reserved |
                    This template is made with <i class="fas fa-heart color-danger" aria-hidden="true"></i> by 
                    <a href="https://colorlib.com" target="_blank">Colorlib</a>
                </p>
            </div>
        </div>
    </div>
</footer>
<!-- Footer Section End -->


    <!-- Search Begin -->
    <div class="search-model">
        <div class="h-100 d-flex align-items-center justify-content-center">
            <div class="search-close-switch">+</div>
            <form class="search-model-form">
                <input type="text" id="search-input" placeholder="Search here.....">
            </form>
        </div>
    </div>





    
<!-- Add Address Modal -->
<div class="modal fade" id="addProductModal" tabindex="-1" role="dialog" aria-labelledby="addProductModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addProductModalLabel">Add Address</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form action="/user/addAddress" method="post" class="billing-form" id="addressForm">
            <div class="modal-body">
              
                <div class="container">
                   
                        <div class="row align-items-end">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="modalFirstname">First Name</label>
                                   
                                    <input type="text" id="modalFirstname" name="firstname" class="form-control" placeholder="">
                                    <div class="error"></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="modalLastname">Last Name</label>
                                    <input type="text" id="modalLastname" name="lastname" class="form-control" placeholder="">
                                    <div class="error"></div>
                                </div>
                            </div>
                            <div class="w-100"></div>
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label for="modalState">State / Country</label>
                                    <div class="select-wrap">
                                        <!-- <div class="icon"><span class="ion-ios-arrow-down"></span></div> -->
                                        <select name="state" id="modalState" class="form-control">
                                            <option value="">Select State / Country</option>
                                            <option value="France">France</option>
                                            <option value="Italy">Italy</option>
                                            <option value="Philippines">Philippines</option>
                                            <option value="South Korea">South Korea</option>
                                            <option value="Hongkong">Hongkong</option>
                                            <option value="Japan">Japan</option>
                                        </select>
                                    </div>
                                    <div class="error"></div>
                                </div>
                            </div>
                            <div class="w-100"></div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="modalStreetaddress">Street Address</label>
                                    <input type="text" class="form-control" id="modalStreetaddress" name="streetaddress" placeholder="House number and street name">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <input type="text" class="form-control" id="modalLandmark" name="landmark" placeholder="Apartment, suite, unit etc: (optional)">
                                </div>
                            </div>
                            <div class="w-100"></div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="modalCity">Town / City</label>
                                    <input type="text" id="modalCity" name="city" class="form-control" placeholder="">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="modalPincode">Postcode / ZIP *</label>
                                    <input type="text" id="modalPincode" name="pincode" class="form-control" placeholder="">
                                </div>
                            </div>
                            <div class="w-100"></div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="modalNumber">Phone</label>
                                    <input type="text" id="modalNumber" name="number" class="form-control" placeholder="">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="modalEmail">Email Address</label>
                                    <input type="text" id="modalEmail" name="email" class="form-control" placeholder="">
                                </div>
                            </div>
                        </div>
                 
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary" id="saveChanges">Save changes</button>
            </div>
        </form>
        </div>
    </div>
</div>


<!-- Edit Address Modal -->
<div class="modal fade" id="editAddressModal" tabindex="-1" role="dialog" aria-labelledby="editAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form action="/user/editAddress" method="post" class="billing-form" id="editAddressForm">
                <div class="modal-body">
                    <input type="hidden" id="editAddressId" name="addressId">
                    <div class="container">
                        <div class="row align-items-end">
                            <!-- Similar form structure as the add address modal -->
                            <!-- Populate these fields with JavaScript when the Edit button is clicked -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="editModalFirstname">First Name</label>
                                    <input type="text" id="editModalFirstname" name="firstname" class="form-control" placeholder="">
                                    <div class="error"></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="editModalLastname">Last Name</label>
                                    <input type="text" id="editModalLastname" name="lastname" class="form-control" placeholder="">
                                    <div class="error"></div>
                                </div>
                            </div>
                            <div class="w-100"></div>
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label for="editModalState">State / Country</label>
                                    <div class="select-wrap">
                                        <!-- <div class="icon"><span class="ion-ios-arrow-down"></span></div> -->
                                        <select name="state" id="editModalState" class="form-control">
                                            <option value="">Select State / Country</option>
                                            <option value="France">France</option>
                                            <option value="Italy">Italy</option>
                                            <option value="Philippines">Philippines</option>
                                            <option value="South Korea">South Korea</option>
                                            <option value="Hongkong">Hongkong</option>
                                            <option value="Japan">Japan</option>
                                        </select>
                                    </div>
                                    <div class="error"></div>
                                </div>
                            </div>
                            <div class="w-100"></div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="editModalStreetaddress">Street Address</label>
                                    <input type="text" class="form-control" id="editModalStreetaddress" name="streetaddress" placeholder="House number and street name">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <input type="text" class="form-control" id="editModalLandmark" name="landmark" placeholder="Apartment, suite, unit etc: (optional)">
                                </div>
                            </div>
                            <div class="w-100"></div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="editModalCity">Town / City</label>
                                    <input type="text" id="editModalCity" name="city" class="form-control" placeholder="">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="editModalPincode">Postcode / ZIP *</label>
                                    <input type="text" id="editModalPincode" name="pincode" class="form-control" placeholder="">
                                </div>
                            </div>
                            <div class="w-100"></div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="editModalNumber">Phone</label>
                                    <input type="text" id="editModalNumber" name="number" class="form-control" placeholder="">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="editModalEmail">Email Address</label>
                                    <input type="text" id="editModalEmail" name="email" class="form-control" placeholder="">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary" id="updateAddress">Update Address</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Bootstrap JS and dependencies -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>



    
   <!-- Search End -->
 <!-- Js Plugins -->
 <script src="/js/jquery-3.4.1.min.js"></script>
 <!-- <script src="/js/bootstrap11.min.js"></script> -->
 <script src="/js/jquery.nice-select.min.js"></script>
 <script src="/js/jquery.nicescroll.min.js"></script>
 <script src="/js/jquery.magnific-popup.min.js"></script>
 <script src="/js/jquery.countdown.min.js"></script>
 <script src="/js/jquery.slicknav.js"></script>
 <script src="/js/mixitup.min.js"></script>
 <script src="/js/owl.carousel1.min.js"></script>
 <script src="/js/main3.js"></script>
 
 <!-- Bootstrap JS bundle (includes Popper) -->
 <script src="/js/bootstrap.bundle.min.js"></script>

 <!-- Your custom JavaScript file (if any) -->
 <script src="/js/custom-scripts.js"></script>


<script>
 
 document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM fully loaded and parsed');


    // Add address form variables
    const addressForm = document.getElementById('addressForm');
    const firstname = document.getElementById('modalFirstname');
    const lastname = document.getElementById('modalLastname');
    const state = document.getElementById('modalState');
    const streetaddress = document.getElementById('modalStreetaddress');
    const landmark = document.getElementById('modalLandmark');
    const city = document.getElementById('modalCity');
    const pincode = document.getElementById('modalPincode');
    const number = document.getElementById('modalNumber');
    const email = document.getElementById('modalEmail');
    
    console.log(firstname);


    
    // New edit address form variables
    const editAddressForm = document.getElementById('editAddressForm');
    const editFirstname = document.getElementById('editModalFirstname');
    const editLastname = document.getElementById('editModalLastname');
    const editState = document.getElementById('editModalState');
    const editStreetaddress = document.getElementById('editModalStreetaddress');
    const editLandmark = document.getElementById('editModalLandmark');
    const editCity = document.getElementById('editModalCity');
    const editPincode = document.getElementById('editModalPincode');
    const editNumber = document.getElementById('editModalNumber');
    const editEmail = document.getElementById('editModalEmail');
    const editAddressId = document.getElementById('editAddressId');



    console.log('This is my editAddressForm',editAddressForm);



    //Address fetch to backend
    if (addressForm) {
        addressForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            console.log('Form submitted');
            validateInputs();

            if (isValid()) {
                console.log('Form is valid');
                const formData = {
                    firstname: firstname.value.trim(),
                    lastname: lastname.value.trim(),
                    state: state.value.trim(),
                    streetaddress: streetaddress.value.trim(),
                    landmark: landmark.value.trim(),
                    city: city.value.trim(),
                    pincode: pincode.value.trim(),
                    number: number.value.trim(),
                    email: email.value.trim(),
                };
                console.log('FormData:', formData);

                try {
                    const response = await fetch('/user/addAddress', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData),
                    });

                    const result = await response.json();

                    if (response.ok) {
                        Swal.fire({
                            title: 'Success',
                            text: result.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                        window.location.href = '/user/cheakOut';
                    });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: result.message,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                } catch (error) {
                    console.error('Error during fetch:', error);
                    Swal.fire({
                        title: 'Error',
                        text: 'An error occurred. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            }
        });
    }


    //edit address to backend
    if (editAddressForm) {
        editAddressForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            console.log('Edit form submitted');
            validateEditInputs();

            if (isEditValid()) {
                console.log('Edit form is valid');
                const editFormData = {
                    id: editAddressId.value.trim(),
                    firstname: editFirstname.value.trim(),
                    lastname: editLastname.value.trim(),
                    state: editState.value.trim(),
                    streetaddress: editStreetaddress.value.trim(),
                    landmark: editLandmark.value.trim(),
                    city: editCity.value.trim(),
                    pincode: editPincode.value.trim(),
                    number: editNumber.value.trim(),
                    email: editEmail.value.trim(),
                };

                
                console.log('my edit Address ID:', editAddressId.value.trim());

                console.log('EditFormData:', editFormData);

                try {
                    const response = await fetch('/user/editAddress', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(editFormData),
                    });

                    const result = await response.json();

                    if (response.ok) {
                        Swal.fire({
                            title: 'Success',
                            text: result.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            window.location.href = '/user/cheakOut';
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: result.message,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                } catch (error) {
                    console.error('Error during fetch:', error);
                    Swal.fire({
                        title: 'Error',
                        text: 'An error occurred. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            }
        });
    }






    const isValid = () => {
        const valid = (
            firstname.parentElement.classList.contains('success') &&
            lastname.parentElement.classList.contains('success') &&
            state.closest('.form-group').classList.contains('success') &&
            streetaddress.parentElement.classList.contains('success') &&
            city.parentElement.classList.contains('success') &&
            pincode.parentElement.classList.contains('success') &&
            number.parentElement.classList.contains('success') &&
            email.parentElement.classList.contains('success')
        );

        console.log('Form is valid:', valid);
        return valid;
    };



    //editAddress is valid

    const isEditValid = () => {
        const valid = (
            editFirstname.parentElement.classList.contains('success') &&
            editLastname.parentElement.classList.contains('success') &&
            editState.closest('.form-group').classList.contains('success') &&
            editStreetaddress.parentElement.classList.contains('success') &&
            editCity.parentElement.classList.contains('success') &&
            editPincode.parentElement.classList.contains('success') &&
            editNumber.parentElement.classList.contains('success') &&
            editEmail.parentElement.classList.contains('success')
        );

        console.log('Edit form is valid:', valid);
        return valid;
    };



    const setError = (element, message) => {
        const inputControl = element.closest('.form-group');
        let errorDisplay = inputControl.querySelector('.error');

        if (!errorDisplay) {
            errorDisplay = document.createElement('span');
            errorDisplay.className = 'error';
            inputControl.appendChild(errorDisplay);
        }
        errorDisplay.innerText = message;
        inputControl.classList.add('error');
        inputControl.classList.remove('success');
        console.log('Error set for:', element.id);
    };

    const setSuccess = (element) => {
        const inputControl = element.closest('.form-group');
        const errorDisplay = inputControl.querySelector('.error');

        if (errorDisplay) {
            errorDisplay.remove();
        }
        inputControl.classList.add('success');
        inputControl.classList.remove('error');
        console.log('Success set for:', element.id);
    };

    const isValidEmail = (email) => {
        const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(String(email).toLowerCase());
    };

    const isValidPhoneNumber = (phone) => {
        const numericPhone = phone.replace(/\D/g, '');
        return /^[1-9]\d{9}$/.test(numericPhone);
    };

    const isValidName = (name) => {
        const re = /^[a-zA-Z\s]+$/;
        return re.test(name);
    };

    const validateInputs = () => {
        const firstnameValue = firstname.value.trim();
        const lastnameValue = lastname.value.trim();
        const stateValue = state.value.trim();
        const streetaddressValue = streetaddress.value.trim();
        const cityValue = city.value.trim();
        const pincodeValue = pincode.value.trim();
        const numberValue = number.value.trim();
        const emailValue = email.value.trim();

        console.log('Validating inputs');

        if (firstnameValue === '') {
            setError(firstname, 'First name is required');
        } else if (!isValidName(firstnameValue)) {
            setError(firstname, 'First name cannot contain numbers or special characters');
        } else {
            setSuccess(firstname);
        }

        if (lastnameValue === '') {
            setError(lastname, 'Last name is required');
        } else if (!isValidName(lastnameValue)) {
            setError(lastname, 'Last name cannot contain numbers or special characters');
        } else {
            setSuccess(lastname);
        }

        if (stateValue === '') {
            setError(state, 'State / Country is required');
        } else {
            setSuccess(state);
        }

        if (streetaddressValue === '') {
            setError(streetaddress, 'Street address is required');
        } else {
            setSuccess(streetaddress);
        }

        if (cityValue === '') {
            setError(city, 'Town / City is required');
        } else {
            setSuccess(city);
        }

        if (pincodeValue === '') {
            setError(pincode, 'Postcode / ZIP is required');
        } else {
            setSuccess(pincode);
        }

        if (numberValue === '') {
            setError(number, 'Phone number is required');
        } else if (!isValidPhoneNumber(numberValue)) {
            setError(number, 'Provide a valid phone number');
        } else {
            setSuccess(number);
        }

        if (emailValue === '') {
            setError(email, 'Email address is required');
        } else if (!isValidEmail(emailValue)) {
            setError(email, 'Provide a valid email address');
        } else {
            setSuccess(email);
        }

        // Log the status of each field
        // console.log('First name valid:', firstname.parentElement.classList.contains('success'));
        // console.log('Last name valid:', lastname.parentElement.classList.contains('success'));
        // console.log('State valid:', state.closest('.form-group').classList.contains('success'));
        // console.log('Street address valid:', streetaddress.parentElement.classList.contains('success'));
        // console.log('City valid:', city.parentElement.classList.contains('success'));
        // console.log('Pincode valid:', pincode.parentElement.classList.contains('success'));
        // console.log('Number valid:', number.parentElement.classList.contains('success'));
        // console.log('Email valid:', email.parentElement.classList.contains('success'));
    };



    //edit validateInputs
    const validateEditInputs = () => {
        const firstnameValue = editFirstname.value.trim();
        const lastnameValue = editLastname.value.trim();
        const stateValue = editState.value.trim();
        const streetaddressValue = editStreetaddress.value.trim();
        const cityValue = editCity.value.trim();
        const pincodeValue = editPincode.value.trim();
        const numberValue = editNumber.value.trim();
        const emailValue = editEmail.value.trim();

        console.log('Validating edit inputs');

        if (firstnameValue === '') {
            setError(editFirstname, 'First name is required');
        } else if (!isValidName(firstnameValue)) {
            setError(editFirstname, 'First name cannot contain numbers or special characters');
        } else {
            setSuccess(editFirstname);
        }

        if (lastnameValue === '') {
            setError(editLastname, 'Last name is required');
        } else if (!isValidName(lastnameValue)) {
            setError(editLastname, 'Last name cannot contain numbers or special characters');
        } else {
            setSuccess(editLastname);
        }

        if (stateValue === '') {
            setError(editState, 'State / Country is required');
        } else {
            setSuccess(editState);
        }

        if (streetaddressValue === '') {
            setError(editStreetaddress, 'Street address is required');
        } else {
            setSuccess(editStreetaddress);
        }

        if (cityValue === '') {
            setError(editCity, 'Town / City is required');
        } else {
            setSuccess(editCity);
        }

        if (pincodeValue === '') {
            setError(editPincode, 'Postcode / ZIP is required');
        } else {
            setSuccess(editPincode);
        }

        if (numberValue === '') {
            setError(editNumber, 'Phone number is required');
        } else if (!isValidPhoneNumber(numberValue)) {
            setError(editNumber, 'Provide a valid phone number');
        } else {
            setSuccess(editNumber);
        }

        if (emailValue === '') {
            setError(editEmail, 'Email address is required');
        } else if (!isValidEmail(emailValue)) {
            setError(editEmail, 'Provide a valid email address');
        } else {
            setSuccess(editEmail);
        }
    };




});

   </script>
   <script>
    
    document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.btn-edit-address').forEach(button => {
        button.addEventListener('click', async () => {
            const addressId = button.getAttribute('data-id');

            console.log('This is fornt end addressId :' , addressId);
            try {
                const response = await fetch(`/user/myaddress/${addressId}`);
                const data = await response.json();
                if (data.success) {
                    populateEditForm(data.address);
                    $('#editAddressModal').modal('show');
                } else {
                    console.error('Failed to fetch address details');
                }
            } catch (error) {
                console.error('Error fetching address:', error);
            }
        });
    });
});

    const populateEditForm = (address) => {
    console.log('Populating form with address:', address);  // Add this line
    document.getElementById('editAddressId').value = address._id;
    document.getElementById('editModalFirstname').value = address.Firstname;
    document.getElementById('editModalLastname').value = address.Lastname;
    document.getElementById('editModalState').value = address.state;
    document.getElementById('editModalStreetaddress').value = address.streetaddress;
    document.getElementById('editModalLandmark').value = address.Landmark;
    document.getElementById('editModalCity').value = address.city;
    document.getElementById('editModalPincode').value = address.pincode;
    document.getElementById('editModalNumber').value = address.number;
    document.getElementById('editModalEmail').value = address.email;
};
   </script>

   <script>

    document.addEventListener('DOMContentLoaded', ()=>{
        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click' , async() =>{
                const addressId = button.getAttribute('data-id');

                console.log('This is my addressId to delete',addressId);

                try {
                    const response = await fetch(`/user/removeaddress/${addressId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    const data = await response.json();
                    if (data.success) {
                        // alert('Address deleted successfully');
                        // Optionally, remove the address from the DOM or refresh the page
                        location.reload();  // Simple way to refresh the page
                    } else {
                        alert('Failed to delete address');
                    }
                } catch (error) {
                    console.error('Error deleting address:', error);
                    alert('Error deleting address');
                }
        });
    });
});

   </script>



<script>
document.addEventListener("DOMContentLoaded", function() {
    const placeOrderButton = document.getElementById("placeOrderButton");
    const paymentMethods = document.querySelectorAll(".payment-method");
    const addressRadios = document.querySelectorAll('input[name="selectedAddress"]');
    const offerDiscountElement = document.getElementById("offerDiscount");
    const couponDiscountElement = document.getElementById("couponDiscount");
    const shippingChargeElement = document.getElementById("shippingCharge");
    const totalElement = document.getElementById("total");
    const walletBalanceElement = document.getElementById("wallet-balance");

    paymentMethods.forEach(method => {
        method.addEventListener("change", function() {
            paymentMethods.forEach(otherMethod => {
                if (otherMethod !== method) {
                    otherMethod.checked = false;
                }
            });
            placeOrderButton.disabled = !Array.from(paymentMethods).some(method => method.checked);

            // If wallet is selected, check if the balance is sufficient
            if (method.id === 'wallet') {
                const walletBalance = parseFloat(walletBalanceElement.textContent) || 0;
                const totalAmount = parseFloat(totalElement.textContent.replace('₹', '')) || 0;
                if (walletBalance < totalAmount) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Insufficient Balance',
                        text: 'Your wallet balance is not enough to complete this purchase.',
                        customClass: {
                        popup: 'small-modal'
                    }
                    });
                    method.checked = false;
                    placeOrderButton.disabled = true;
                }
            }
        });
    });

    placeOrderButton.addEventListener("click", function() {
        const selectedAddress = Array.from(addressRadios).find(radio => radio.checked)?.value;
        const selectedPaymentMethod = Array.from(paymentMethods).find(method => method.checked)?.id;

        if (!selectedAddress || !selectedPaymentMethod) {
            Swal.fire({
                icon: 'warning',
                title: 'Missing Information',
                text: 'Please select both an address and a payment method.',
                customClass: {
                    popup: 'small-modal'
                  }
            });
            return;
        }

        const offerDiscount = parseFloat(offerDiscountElement.textContent.replace('₹', '')) || 0;
        const couponDiscount = parseFloat(couponDiscountElement.textContent.replace('₹', '').replace('-', '')) || 0;
        const shippingCharge = parseFloat(shippingChargeElement.textContent.replace('₹', '')) || 0;
        const totalAmount = parseFloat(totalElement.textContent.replace('₹', '')) || 0;
        const walletBalance = parseFloat(walletBalanceElement.textContent) || 0;

        const orderData = {
            PaymentMethod: selectedPaymentMethod,
            addressId: selectedAddress,
            offerDiscount,
            couponDiscount,
            shippingCharge,
            totalAmount,
            walletBalance
        };


        fetch("/user/place-order", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(orderData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                if (selectedPaymentMethod === 'Cashondelivary' || selectedPaymentMethod === 'wallet') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Order Placed',
                        text: 'Your order has been placed successfully!',
                        customClass: {
                            popup: 'small-modal'
                             }
                    }).then(() => {
                        window.location.href = "/user/order";
                    });
                } else if (selectedPaymentMethod === 'razerpay') {
                    const options = {
                        key: 'rzp_test_qPtwviU68jrUXP',
                        amount: data.razorpayOrder.amount,
                        currency: data.razorpayOrder.currency,
                        name: 'Your Company Name',
                        description: 'Order Payment',
                        order_id: data.razorpayOrder.id,
                        handler: function (response) {
                            fetch('/user/update-payment-status', {
                                method: 'POST',
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({ orderId: data.order_id, paymentId: response.razorpay_payment_id }) // using actual order ID
                            })
                            .then(res => res.json())
                            .then(result => {
                                if (result.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Payment Successful',
                                        text: 'Your order has been placed and payment is successful!',
                                        customClass: {
                                        popup: 'small-modal'
                                    }
                                    }).then(() => {
                                        window.location.href = "/user/order";
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment Failed',
                                        text: 'There was an issue updating the payment status. Please contact support.',
                                        customClass: {
                                        popup: 'small-modal'
                                    }
                                    });
                                }
                            });
                        },
                        prefill: {
                            name: 'Your Name',
                            email: 'your_email@example.com',
                            contact: '1234567890'
                        },
                        theme: {
                            color: '#3399cc'
                        },
                        modal: {
                            ondismiss: function() {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Payment Cancelled',
                                    text: 'You payment has been faild. Please try again later.',
                                    customClass: {
                                    popup: 'small-modal'
                                }
                                }).then(() => {
                                    window.location.href = "/user/Userorders";
                                });
                            }
                        }
                    };
                    const rzp = new Razorpay(options);
                    rzp.open();
                }
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Order Failed',
                    text: data.message || 'There was an issue placing your order. Please try again.',
                    customClass: {
                    popup: 'small-modal'
                  }
                });
            }
        })
        .catch(error => {
            console.error("Error placing order:", error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while placing your order. Please try again.',
                customClass: {
                    popup: 'small-modal'
                  }
            });
        });
    });
});
</script>


<script>

document.addEventListener('DOMContentLoaded', async () => {
    const toggleButton = document.getElementById('toggle-coupons');
    const couponsSection = document.getElementById('available-coupons');
    const couponsList = document.getElementById('coupons-list');
    const applyButton = document.getElementById('apply-discount');
    const removeButton = document.getElementById('remove-coupon');
    const couponCodeInput = document.getElementById('coupon-code');
    const couponDiscountElement = document.getElementById('couponDiscount');
    const offerDiscountElement = document.getElementById('offerDiscount');
    const totalElement = document.getElementById('total');
    const discountAmountElement = document.getElementById('discountAmount');

    console.log('DOM fully loaded and parsed');

    // Toggle coupons visibility
    toggleButton.addEventListener('click', () => {
        if (couponsSection.style.display === 'none' || couponsSection.style.display === '') {
            couponsSection.style.display = 'block';
            toggleButton.textContent = 'Hide Available Coupons';
        } else {
            couponsSection.style.display = 'none';
            toggleButton.textContent = 'Show Available Coupons';
        }
    });

    // Fetch available coupons
    try {
        const response = await fetch('/user/getCoupons');
        const coupons = await response.json();

        if (response.ok) {
            coupons.forEach(coupon => {
                const expireDate = new Date(coupon.expireDate);
                const formattedDate = expireDate.toLocaleDateString();
                const listItem = document.createElement('li');
                listItem.innerHTML = `
                    <span>${coupon.couponCode} - ${coupon.discount}% off (Expires: ${formattedDate})</span>
                    <button type="button" class="apply-coupon" data-code="${coupon.couponCode}">Apply</button>
                `;
                couponsList.appendChild(listItem);
            });

            // Add event listeners to all Apply buttons
            document.querySelectorAll('.apply-coupon').forEach(button => {
                button.addEventListener('click', () => {
                    couponCodeInput.value = button.getAttribute('data-code');
                    console.log('Coupon code set:', couponCodeInput.value);
                });
            });
        } else {
            console.error('Failed to fetch coupons:', coupons.message);
        }
    } catch (error) {
        console.error('Error fetching coupons:', error);
    }

    // Apply coupon
    applyButton.addEventListener('click', async () => {
        const couponCode = couponCodeInput.value.trim();

        if (!couponCode) {
        Swal.fire({
            title: 'Oops!',
            text: 'Please enter a coupon code.',
            icon: 'warning',
            confirmButtonText: 'OK',
            customClass: {
                    popup: 'small-modal'
                  }
        });
        return;
}

        try {
            const response = await fetch('/user/applyCoupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ couponCode }),
            });

            const result = await response.json();

            if (response.ok) {
                const { discount, newTotal } = result;

                console.log("This is discount for couponApplay :", discount);
                console.log("This is newTotal for couponApplay :", newTotal);

                couponDiscountElement.textContent = `-₹${discount.toFixed(2)}`;
                const offerDiscount = parseFloat(offerDiscountElement.textContent.replace('₹', '')) || 0;
                const finalTotal = newTotal;

                totalElement.textContent = finalTotal.toFixed(2);
                discountAmountElement.value = discount.toFixed(2);

                applyButton.style.display = 'none'; // Hide Apply button
                removeButton.style.display = 'inline-block'; // Show Remove button

                Swal.fire({
                    title: 'Success',
                    text: `Coupon applied! Discount: ₹${discount.toFixed(2)}`,
                    icon: 'success',
                    confirmButtonText: 'OK',
                    customClass: {
                    popup: 'small-modal'
                  }
                });
            } else {
                Swal.fire({
                    title: 'Error',
                    text: result.message,
                    icon: 'error',
                    confirmButtonText: 'OK',
                    customClass: {
                    popup: 'small-modal'
                  }
                });
            }
        } catch (error) {
            console.error('Error during coupon application:', error);
            Swal.fire({
                title: 'Error',
                text: 'An error occurred. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK',
                customClass: {
                    popup: 'small-modal'
                  }
            });
        }
    });

    // Remove coupon
    removeButton.addEventListener('click', async () => {
        try {
            const response = await fetch('/user/removeCoupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ couponCode: couponCodeInput.value.trim() }),
            });

            const result = await response.json();

            if (response.ok) {
                couponDiscountElement.textContent = '₹0.00';
                discountAmountElement.value = '0';

                // Fetch updated cart to get the original subtotal
                const cartResponse = await fetch('/user/getCart');
                const cartData = await cartResponse.json();

                if (cartResponse.ok) {
                    // Calculate the original subtotal
                    const subtotal = cartData.products.reduce((sum, product) => {
                        const price = product.discountedPrice ? product.discountedPrice : product.productId.price;
                        return sum + price * product.quantity;
                    }, 0);

                    // Display the original subtotal and apply other discounts
                    const offerDiscount = parseFloat(offerDiscountElement.textContent.replace('₹', '')) || 0;
                    const finalTotal = subtotal - offerDiscount;

                    console.log("This is the offerDiscount :", offerDiscount);
                    console.log("This is the finalTotal :", finalTotal);

                    totalElement.textContent = finalTotal.toFixed(2);

                    applyButton.style.display = 'inline-block'; // Show Apply button
                    removeButton.style.display = 'none'; // Hide Remove button

                    Swal.fire({
                        title: 'Success',
                        text: 'Coupon removed!',
                        icon: 'success',
                        confirmButtonText: 'OK',
                        customClass: {
                    popup: 'small-modal'
                  }
                    });
                } else {
                    console.error('Failed to fetch updated cart:', cartData.message);
                    Swal.fire({
                        title: 'Error',
                        text: 'An error occurred while fetching updated cart data.',
                        icon: 'error',
                        confirmButtonText: 'OK',
                        customClass: {
                    popup: 'small-modal'
                  }
                    });
                }
            } else {
                Swal.fire({
                    title: 'Error',
                    text: result.message,
                    icon: 'error',
                    confirmButtonText: 'OK',
                    customClass: {
                    popup: 'small-modal'
                  }
                });
            }
        } catch (error) {
            console.error('Error during coupon removal:', error);
            Swal.fire({
                title: 'Error',
                text: 'An error occurred. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK',
                customClass: {
                    popup: 'small-modal'
                  }
            });
        }
    });
});
</script>
    <%- include('../layouts/footer') %>